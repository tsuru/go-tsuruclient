openapi: 3.0.1
info:
  description: Open source, extensible and Docker-based Platform as a Service (PaaS)
  title: Tsuru
  version: "1.24"
servers:
- url: /
paths:
  /1.0/services:
    get:
      description: List services
      operationId: ServicesList
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ServiceList'
                type: array
          description: Services
        204:
          content: {}
          description: No content
      security:
      - Bearer: []
      tags:
      - service
    post:
      description: Creates a new service
      operationId: ServiceCreate
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Service'
        required: true
      responses:
        201:
          content: {}
          description: Services
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Invalid data
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Service not found
      security:
      - Bearer: []
      tags:
      - service
  /1.0/services/{name}:
    delete:
      description: Delete a service
      operationId: ServiceDelete
      parameters:
      - description: Service name.
        in: path
        name: name
        required: true
        schema:
          minLength: 1
          type: string
      responses:
        200:
          content: {}
          description: Service removed
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        403:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Forbidden
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Service not found
      security:
      - Bearer: []
      tags:
      - service
    get:
      description: Information on a service
      operationId: ServiceInfo
      parameters:
      - description: Service name.
        in: path
        name: name
        required: true
        schema:
          minLength: 1
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ServiceInfo'
                type: array
          description: Service removed
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        403:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Forbidden
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Service not found
      security:
      - Bearer: []
      tags:
      - service
    put:
      description: Updates a service
      operationId: ServiceUpdate
      parameters:
      - description: Service name.
        in: path
        name: name
        required: true
        schema:
          minLength: 1
          type: string
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Service'
        required: true
      responses:
        200:
          content: {}
          description: Service Updated
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Invalid data
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        403:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Forbidden
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Service not found
      security:
      - Bearer: []
      tags:
      - service
  /1.0/services/{name}/plans:
    get:
      description: Plans for a service
      operationId: ServicePlans
      parameters:
      - description: Service name.
        in: path
        name: name
        required: true
        schema:
          minLength: 1
          type: string
      - in: query
        name: pool
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ServicePlan'
                type: array
          description: Service plans
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Service not found
      security:
      - Bearer: []
      tags:
      - service
  /1.0/services/{name}/doc:
    get:
      description: Documentation on a service
      operationId: ServiceDoc
      parameters:
      - description: Service name.
        in: path
        name: name
        required: true
        schema:
          minLength: 1
          type: string
      responses:
        200:
          content: {}
          description: Service docs
        401:
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        403:
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Forbidden
        404:
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Service not found
      security:
      - Bearer: []
      tags:
      - service
    put:
      description: Documentation on a service
      operationId: ServiceAddDoc
      parameters:
      - description: Service name.
        in: path
        name: name
        required: true
        schema:
          minLength: 1
          type: string
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ServiceDoc'
        required: true
      responses:
        200:
          content: {}
          description: Service docs added
        401:
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        403:
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Forbidden
      security:
      - Bearer: []
      tags:
      - service
  /1.0/services/{service}/team/{team}:
    delete:
      description: Revoke access to team for the service
      operationId: ServiceRevokeTeam
      parameters:
      - description: Service name.
        in: path
        name: service
        required: true
        schema:
          minLength: 1
          type: string
      - description: Team name
        in: path
        name: team
        required: true
        schema:
          minLength: 1
          type: string
      responses:
        200:
          content: {}
          description: Team access revoked
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Team not found
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Service not found
        409:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Team does not has access to this service
      security:
      - Bearer: []
      tags:
      - service
    put:
      description: Grant access to team for the service
      operationId: ServiceGrantTeam
      parameters:
      - description: Service name.
        in: path
        name: service
        required: true
        schema:
          minLength: 1
          type: string
      - description: Team name
        in: path
        name: team
        required: true
        schema:
          minLength: 1
          type: string
      responses:
        200:
          content: {}
          description: Team access granted
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Team not found
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Service not found
        409:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Team already has access to this service
      security:
      - Bearer: []
      tags:
      - service
  /1.0/services/instances:
    get:
      description: List service instances
      operationId: InstancesList
      parameters:
      - description: Filter instances by app name
        in: query
        name: app
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ServiceList'
                type: array
          description: Service instances
        204:
          content: {}
          description: No content
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
      security:
      - Bearer: []
      tags:
      - service
  /1.0/services/{service}/instances:
    post:
      description: Create a service instance
      operationId: InstanceCreate
      parameters:
      - description: Service name.
        in: path
        name: service
        required: true
        schema:
          minLength: 1
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceInstance'
        required: true
      responses:
        200:
          content: {}
          description: Service instance created
        401:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        404:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Service not found
      security:
      - Bearer: []
      tags:
      - service
  /1.0/services/{service}/instances/{instance}:
    delete:
      description: Remove service instance
      operationId: InstanceDelete
      parameters:
      - description: Service name.
        in: path
        name: service
        required: true
        schema:
          minLength: 1
          type: string
      - description: Instance name.
        in: path
        name: instance
        required: true
        schema:
          minLength: 1
          type: string
      - description: Remove current binds to this instance
        in: query
        name: unbindall
        required: true
        schema:
          type: boolean
      responses:
        200:
          content: {}
          description: Service removed
        400:
          content: {}
          description: Bad request
        401:
          content:
            application/x-json-stream:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        404:
          content:
            application/x-json-stream:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Service instance not found
      security:
      - Bearer: []
      tags:
      - service
    get:
      description: Get service instance information
      operationId: InstanceGet
      parameters:
      - description: Service name.
        in: path
        name: service
        required: true
        schema:
          minLength: 1
          type: string
      - description: Instance name.
        in: path
        name: instance
        required: true
        schema:
          minLength: 1
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceInstanceInfo'
          description: Service instance
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Service instance not found
      security:
      - Bearer: []
      tags:
      - service
    put:
      description: Update a service instance
      operationId: InstanceUpdate
      parameters:
      - description: Service name.
        in: path
        name: service
        required: true
        schema:
          minLength: 1
          type: string
      - description: Instance name.
        in: path
        name: instance
        required: true
        schema:
          minLength: 1
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceInstanceUpdateData'
        required: true
      responses:
        200:
          content: {}
          description: Service instance updated
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Invalid data
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Service instance not found
      security:
      - Bearer: []
      tags:
      - service
  /1.0/services/{service}/instances/{instance}/{app}:
    delete:
      deprecated: true
      description: Unbind the service instance from app
      operationId: ServiceInstanceUnbind1_0
      parameters:
      - description: Service name.
        in: path
        name: service
        required: true
        schema:
          minLength: 1
          type: string
      - description: Instance name.
        in: path
        name: instance
        required: true
        schema:
          minLength: 1
          type: string
      - description: App name.
        in: path
        name: app
        required: true
        schema:
          minLength: 1
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ServiceInstanceUnbind'
        required: true
      responses:
        200:
          content: {}
          description: Instance has been unbound from the app.
        401:
          content:
            application/x-json-stream:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
      security:
      - Bearer: []
      tags:
      - service
    put:
      deprecated: true
      description: Bind the service instance to app
      operationId: ServiceInstanceBind1_0
      parameters:
      - description: Service name.
        in: path
        name: service
        required: true
        schema:
          minLength: 1
          type: string
      - description: Instance name.
        in: path
        name: instance
        required: true
        schema:
          minLength: 1
          type: string
      - description: App name.
        in: path
        name: app
        required: true
        schema:
          minLength: 1
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ServiceInstanceBind'
        required: true
      responses:
        200:
          content: {}
          description: Instance bound to the app.
        401:
          content:
            application/x-json-stream:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
      security:
      - Bearer: []
      tags:
      - service
  /1.0/services/{service}/instances/{instance}/status:
    get:
      description: Status for service instance
      operationId: ServiceInstanceStatus
      parameters:
      - description: Service name.
        in: path
        name: service
        required: true
        schema:
          minLength: 1
          type: string
      - description: Instance name.
        in: path
        name: instance
        required: true
        schema:
          minLength: 1
          type: string
      responses:
        200:
          content: {}
          description: Instance has been unbound from the app.
        401:
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        404:
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Service instance or team not found
      security:
      - Bearer: []
      tags:
      - service
  /1.0/services/{service}/instances/permission/{instance}/{team}:
    delete:
      description: Revoke access to team for this service instance
      operationId: ServiceInstanceRevoke
      parameters:
      - description: Service name.
        in: path
        name: service
        required: true
        schema:
          minLength: 1
          type: string
      - description: Instance name.
        in: path
        name: instance
        required: true
        schema:
          minLength: 1
          type: string
      - description: Team name.
        in: path
        name: team
        required: true
        schema:
          minLength: 1
          type: string
      responses:
        200:
          content: {}
          description: Access revoked
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Service instance or team not found
      security:
      - Bearer: []
      tags:
      - service
    put:
      description: Grant access to team for this service instance
      operationId: ServiceInstanceGrant
      parameters:
      - description: Service name.
        in: path
        name: service
        required: true
        schema:
          minLength: 1
          type: string
      - description: Instance name.
        in: path
        name: instance
        required: true
        schema:
          minLength: 1
          type: string
      - description: Team name.
        in: path
        name: team
        required: true
        schema:
          minLength: 1
          type: string
      responses:
        200:
          content: {}
          description: Access granted
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Service instance or team not found
      security:
      - Bearer: []
      tags:
      - service
  /1.13/services/{service}/instances/{instance}/apps/{app}:
    delete:
      description: Unbind the service instance from app
      operationId: ServiceInstanceUnbind
      parameters:
      - description: Service name.
        in: path
        name: service
        required: true
        schema:
          minLength: 1
          type: string
      - description: Instance name.
        in: path
        name: instance
        required: true
        schema:
          minLength: 1
          type: string
      - description: App name.
        in: path
        name: app
        required: true
        schema:
          minLength: 1
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ServiceInstanceUnbind'
        required: true
      responses:
        200:
          content: {}
          description: Instance has been unbound from the app.
        401:
          content:
            application/x-json-stream:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        404:
          content:
            application/x-json-stream:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: App not found.
      security:
      - Bearer: []
      tags:
      - service
    put:
      description: Bind the service instance to app
      operationId: ServiceInstanceBind
      parameters:
      - description: Service name.
        in: path
        name: service
        required: true
        schema:
          minLength: 1
          type: string
      - description: Instance name.
        in: path
        name: instance
        required: true
        schema:
          minLength: 1
          type: string
      - description: App name.
        in: path
        name: app
        required: true
        schema:
          minLength: 1
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ServiceInstanceBind'
        required: true
      responses:
        200:
          content: {}
          description: Instance bound to the app.
        401:
          content:
            application/x-json-stream:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        404:
          content:
            application/x-json-stream:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: App not found.
      security:
      - Bearer: []
      tags:
      - service
  /1.13/services/{service}/instances/{instance}/jobs/{job}:
    delete:
      description: Unbind the service instance from job
      operationId: JobServiceInstanceUnbind
      parameters:
      - description: Service name.
        in: path
        name: service
        required: true
        schema:
          minLength: 1
          type: string
      - description: Instance name.
        in: path
        name: instance
        required: true
        schema:
          minLength: 1
          type: string
      - description: Job name.
        in: path
        name: job
        required: true
        schema:
          minLength: 1
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/JobServiceInstanceUnbind'
        required: true
      responses:
        200:
          content: {}
          description: Instance has been unbound from the job.
        401:
          content:
            application/x-json-stream:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        404:
          content:
            application/x-json-stream:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Job not found.
      security:
      - Bearer: []
      tags:
      - service
    put:
      description: Bind the service instance to job
      operationId: JobServiceInstanceBind
      parameters:
      - description: Service name.
        in: path
        name: service
        required: true
        schema:
          minLength: 1
          type: string
      - description: Instance name.
        in: path
        name: instance
        required: true
        schema:
          minLength: 1
          type: string
      - description: Job name.
        in: path
        name: job
        required: true
        schema:
          minLength: 1
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/JobServiceInstanceBind'
        required: true
      responses:
        200:
          content: {}
          description: Instance bound to the job.
        401:
          content:
            application/x-json-stream:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        404:
          content:
            application/x-json-stream:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Job not found.
      security:
      - Bearer: []
      tags:
      - service
  /1.7/brokers:
    get:
      description: List service brokers
      operationId: ServiceBrokerList
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceBrokerList'
          description: List service brokers
        204:
          content: {}
          description: No content
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
      security:
      - Bearer: []
      tags:
      - service
    post:
      description: Create service broker
      operationId: ServiceBrokerCreate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceBroker'
        required: true
      responses:
        200:
          content: {}
          description: Service Broker created.
        400:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Invalid data
        401:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized.
        409:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Service Broker already exists.
      security:
      - Bearer: []
      tags:
      - service
  /1.7/brokers/{name}:
    delete:
      operationId: ServiceBrokerDelete
      parameters:
      - description: Service Broker name.
        in: path
        name: name
        required: true
        schema:
          minLength: 1
          type: string
      responses:
        200:
          content: {}
          description: Service Broker deleted.
        400:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Invalid data
        401:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized.
        404:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Service Broker not found.
      security:
      - Bearer: []
      tags:
      - service
    put:
      description: Update service broker
      operationId: ServiceBrokerUpdate
      parameters:
      - description: Service Broker name.
        in: path
        name: name
        required: true
        schema:
          minLength: 1
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceBroker'
        required: true
      responses:
        200:
          content: {}
          description: Service Broker updated.
        400:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Invalid data
        401:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized.
        404:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Service Broker not found.
      security:
      - Bearer: []
      tags:
      - service
  /1.0/plans:
    get:
      description: List plans.
      operationId: PlanList
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Plan'
                type: array
          description: Plans list
        204:
          content: {}
          description: No content
      security:
      - Bearer: []
      tags:
      - plan
    post:
      description: Create a new plan
      operationId: PlanCreate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Plan'
        required: true
      responses:
        201:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Plan'
          description: Plan created
        400:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Invalid data
        401:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        409:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Plan already exists
      security:
      - Bearer: []
      tags:
      - plan
  /1.0/plans/{plan}:
    delete:
      description: Remove a plan
      operationId: DeletePlan
      parameters:
      - description: Remove current plan
        in: path
        name: plan
        required: true
        schema:
          type: string
      responses:
        200:
          content: {}
          description: Plan removed
        401:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        404:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Plan not found
      security:
      - Bearer: []
      tags:
      - plan
  /1.0/apps:
    get:
      description: List apps.
      operationId: AppList
      parameters:
      - description: Filter applications by lock status.
        in: query
        name: locked
        schema:
          type: boolean
      - description: Filter applications by name.
        in: query
        name: name
        schema:
          type: string
      - description: Filter applications by owner.
        in: query
        name: owner
        schema:
          type: string
      - description: Filter applications by platform.
        in: query
        name: platform
        schema:
          type: string
      - description: Filter applications by pool.
        in: query
        name: pool
        schema:
          type: string
      - description: Filter applications by unit status.
        in: query
        name: status
        schema:
          type: string
      - description: Filter applications by tag.
        explode: false
        in: query
        name: tag
        schema:
          items:
            type: string
          type: array
        style: form
      - description: Filter applications by team owner.
        in: query
        name: teamOwner
        schema:
          type: string
      - description: Returns applications without units list.
        in: query
        name: simplified
        schema:
          type: boolean
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/MiniApp'
                type: array
          description: List apps
        204:
          content: {}
          description: No content
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
      security:
      - Bearer: []
      tags:
      - app
    post:
      description: Create a new app.
      operationId: AppCreate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InputApp'
        required: true
      responses:
        201:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppCreateResponse'
          description: App created
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Invalid data
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        403:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Quota exceeded
        409:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: App already exists
      security:
      - Bearer: []
      tags:
      - app
  /1.0/apps/{app}:
    delete:
      description: Delete a tsuru app.
      operationId: AppDelete
      parameters:
      - description: App name.
        in: path
        name: app
        required: true
        schema:
          minLength: 1
          type: string
      responses:
        200:
          content: {}
          description: App removed.
        401:
          content:
            application/x-json-stream:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized.
        404:
          content:
            application/x-json-stream:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: App not found.
      security:
      - Bearer: []
      tags:
      - app
    get:
      description: Get info about a tsuru app.
      operationId: AppGet
      parameters:
      - description: App name.
        in: path
        name: app
        required: true
        schema:
          minLength: 1
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/App'
          description: App info
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized.
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: App not found.
      security:
      - Bearer: []
      tags:
      - app
    put:
      description: Update a tsuru app.
      operationId: AppUpdate
      parameters:
      - description: App name.
        in: path
        name: app
        required: true
        schema:
          minLength: 1
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateApp'
        required: true
      responses:
        200:
          content: {}
          description: App updated
        400:
          content:
            application/x-json-stream:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Invalid data
        401:
          content:
            application/x-json-stream:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        404:
          content:
            application/x-json-stream:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Not found
      security:
      - Bearer: []
      tags:
      - app
  /1.0/apps/{app}/certificate:
    delete:
      description: Unset app certificate.
      operationId: CertificatUnset
      parameters:
      - description: App name.
        in: path
        name: app
        required: true
        schema:
          minLength: 1
          type: string
      responses:
        200:
          content: {}
          description: Certificate deleted
        401:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        403:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        404:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Certificate not found
      security:
      - Bearer: []
      tags:
      - app
    put:
      description: Create a certificate
      operationId: certificateSet
      parameters:
      - description: App name.
        in: path
        name: app
        required: true
        schema:
          minLength: 1
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CertificateSetData'
        required: true
      responses:
        201:
          content: {}
          description: Certificate created
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        409:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Certificate already exists
      security:
      - Bearer: []
      tags:
      - app
  /1.24/apps/{app}/certificate:
    get:
      description: Get the certificate for the app.
      operationId: AppGetCertificates
      parameters:
      - description: Application name
        in: path
        name: app
        required: true
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppCertificates'
          description: Certificate found
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: App not found
      security:
      - Bearer: []
      tags:
      - app
  /1.24/apps/{app}/certissuer:
    delete:
      description: Unset the certificate issuer for the app.
      operationId: AppUnsetCertIssuer
      parameters:
      - description: Application name
        in: path
        name: app
        required: true
        schema:
          type: string
      - description: Certificate CNAME
        in: query
        name: cname
        required: true
        schema:
          type: string
      responses:
        200:
          content: {}
          description: Certificate issuer unset
        401:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        404:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: App not found
      security:
      - Bearer: []
      tags:
      - app
    put:
      description: Set the certificate issuer for the app.
      operationId: AppSetCertIssuer
      parameters:
      - description: Application name
        in: path
        name: app
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CertIssuerSetData'
        required: true
      responses:
        200:
          content: {}
          description: Certificate issuer set
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: App not found
      security:
      - Bearer: []
      tags:
      - app
  /1.5/apps/{app}/build:
    post:
      description: Build a Tsuru app image (a regular container image) following the deploy's workflow but don't roll it out to the provisioner. That ends up with a container image that can be pulled by the user or used to deploy the app later.
      operationId: AppBuild
      parameters:
      - description: Application name
        in: path
        name: app
        required: true
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                tag:
                  description: |-
                    Container image's tag reference. It must be a valid tag reference according to [container image's name specification](https://github.com/opencontainers/distribution-spec/blob/main/spec.md#pulling-manifests).

                    Examples: `staging`, `feature-abc`, `42.1.0`
                  type: string
                file:
                  description: |-
                    App's source files (tarball compressed with gzip).

                    NOTE 1: When `dockerfile` field is set, this field contains the container build context files.

                    NOTE 2: Cannot be presented mutually with `archive-url` or `image`.
                  format: binary
                  type: string
                  x-mimetype: application/gzip
                archive-url:
                  description: |-
                    HTTP URL to app's source files.

                    NOTE 1: Tsuru API must be able to download the file over HTTP and the downloaded file must be a tarball compressed with gzip.

                    NOTE 2: Cannot be presented mutually with `dockerfile`, `file` or `image`.

                    Example: `https://my-org.example.com/my-app/v42.tar.gz`.
                  type: string
                image:
                  description: |-
                    Container image name. It must be a valid container image name according to [container image's name specification](https://github.com/opencontainers/distribution-spec/blob/main/spec.md#pulling-manifests).

                    NOTE: Cannot be presented mutually with `archive-url`, `dockerfile` or `file`.

                    Example: `registry.example.com/my-org/my-app:v42`
                  type: string
                dockerfile:
                  description: |-
                    Content of container file (Dockerfile). It must be a valid file according to [Dockerfile reference](https://docs.docker.com/engine/reference/builder/).

                    NOTE: Cannot be presented mutually with `archive-url` or `image`.

                    Example:
                    ```
                    FROM alpine:3.16
                    RUN set -x \
                        apk add --update --no-cache curl ca-certificates
                    COPY ./app.sh ./tsuru.yaml /var/my-app/
                    WORKDIR /var/my-app
                    EXPOSE 8888/tcp
                    ENTRYPOINT ["/var/my-app/app.sh"]
                    CMD ["--port", "8888"]
                    ```
                  type: string
              required:
              - tag
        required: true
      responses:
        200:
          content: {}
          description: Build finished successfully
        400:
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Invalid data
        401:
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        403:
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Forbidden
      security:
      - Bearer: []
      tags:
      - app
  /1.0/apps/{app}/deploy:
    post:
      description: Build a new Tsuru app image and roll it out to the provisioner.
      operationId: AppDeploy
      parameters:
      - description: Application name
        in: path
        name: app
        required: true
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                new-version:
                  default: false
                  description: Whether should create a new version while preserving the old ones in the provisioner.
                  type: boolean
                override-versions:
                  default: false
                  description: Whether should replace all versions in the provisioner by this new one.
                  type: boolean
                message:
                  description: |-
                    Message to describe the deploy.

                    Example: `Updating the driver connector of MongoDB (vX.Y.Z)`
                  type: string
                origin:
                  description: The type of client who originates the deploy.
                  enum:
                  - app-deploy
                  - drag-and-drop
                  - image
                  - git
                  - rebuild
                  - rollback
                  type: string
                file:
                  description: |-
                    App's source files (tarball compressed with gzip).

                    NOTE 1: When `dockerfile` field is set, this field contains the container build context files.

                    NOTE 2: Cannot be presented mutually with `archive-url` or `image`.
                  format: binary
                  type: string
                  x-mimetype: application/gzip
                archive-url:
                  description: |-
                    HTTP URL to app's source files.

                    NOTE 1: Tsuru API must be able to download the file over HTTP and the downloaded file must be a tarball compressed with gzip.

                    NOTE 2: Cannot be presented mutually with `dockerfile`, `file` or `image`.

                    Example: `https://my-org.example.com/my-app/v42.tar.gz`.
                  type: string
                image:
                  description: |-
                    Container image name. It must be a valid container image name according to [container image's name specification](https://github.com/opencontainers/distribution-spec/blob/main/spec.md#pulling-manifests).

                    NOTE: Cannot be presented mutually with `archive-url`, `dockerfile` or `file`.

                    Example: `registry.example.com/my-org/my-app:v42`
                  type: string
                dockerfile:
                  description: |-
                    Content of container file (Dockerfile). It must be a valid file according to [Dockerfile reference](https://docs.docker.com/engine/reference/builder/).

                    NOTE: Cannot be presented mutually with `archive-url` or `image`.

                    Example:
                    ```
                    FROM alpine:3.16
                    RUN set -x \
                        apk add --update --no-cache curl ca-certificates
                    COPY ./app.sh ./tsuru.yaml /var/my-app/
                    WORKDIR /var/my-app
                    EXPOSE 8888/tcp
                    ENTRYPOINT ["/var/my-app/app.sh"]
                    CMD ["--port", "8888"]
                    ```
                  type: string
      responses:
        200:
          content: {}
          description: Deploy finished successfully
        400:
          content: {}
          description: Invalid data
        401:
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        404:
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: App not found
      security:
      - Bearer: []
      tags:
      - app
  /1.0/apps/{app}/cname:
    delete:
      description: remove cname from app
      operationId: AppCnameDelete
      parameters:
      - description: App name.
        in: path
        name: app
        required: true
        schema:
          minLength: 1
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AppCName'
        required: true
      responses:
        200:
          content: {}
          description: Cname removed
        400:
          content: {}
          description: Invalid data
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: App not found
      security:
      - Bearer: []
      tags:
      - app
    post:
      description: adds a cname to app
      operationId: AppCnameAdd
      parameters:
      - description: App name.
        in: path
        name: app
        required: true
        schema:
          minLength: 1
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AppCName'
        required: true
      responses:
        200:
          content: {}
          description: Cname added
        400:
          content: {}
          description: Invalid data
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: App not found
      security:
      - Bearer: []
      tags:
      - app
  /1.0/apps/{app}/run:
    post:
      description: run commands inside an app
      operationId: AppRun
      parameters:
      - description: App name.
        in: path
        name: app
        required: true
        schema:
          minLength: 1
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AppRunOpts'
        description: Options to run commands inside an app
        required: true
      responses:
        200:
          content: {}
          description: Envs updated
        400:
          content:
            application/x-json-stream:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Invalid data
        401:
          content:
            application/x-json-stream:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        404:
          content:
            application/x-json-stream:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: App not found
      security:
      - Bearer: []
      tags:
      - app
  /1.0/apps/{app}/env:
    delete:
      description: Unset app environment variables.
      operationId: EnvUnset
      parameters:
      - description: App name.
        in: path
        name: app
        required: true
        schema:
          minLength: 1
          type: string
      - explode: true
        in: query
        name: env
        required: true
        schema:
          items:
            type: string
          minItems: 1
          type: array
        style: form
      - in: query
        name: norestart
        required: true
        schema:
          type: boolean
      responses:
        200:
          content: {}
          description: Envs deleted
        400:
          content:
            application/x-json-stream:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Invalid data
        401:
          content:
            application/x-json-stream:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        404:
          content:
            application/x-json-stream:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: App not found
      security:
      - Bearer: []
      tags:
      - app
    get:
      description: Get app environment variables.
      operationId: EnvGet
      parameters:
      - description: App name.
        in: path
        name: app
        required: true
        schema:
          minLength: 1
          type: string
      - description: Environment variable name.
        in: query
        name: env
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/EnvVar'
                type: array
          description: Environment variables
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: App not found
      security:
      - Bearer: []
      tags:
      - app
    post:
      description: Set new environment variable.
      operationId: EnvSet
      parameters:
      - description: App name.
        in: path
        name: app
        required: true
        schema:
          minLength: 1
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnvSetData'
        description: Environment variables.
        required: true
      responses:
        200:
          content: {}
          description: Envs updated
        400:
          content:
            application/x-json-stream:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Invalid data
        401:
          content:
            application/x-json-stream:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        404:
          content:
            application/x-json-stream:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: App not found
      security:
      - Bearer: []
      tags:
      - app
  /1.0/apps/{app}/quota:
    get:
      description: Shows app usage info and its quota limit.
      operationId: AppQuotaGet
      parameters:
      - description: App name.
        in: path
        name: app
        required: true
        schema:
          minLength: 1
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Quota'
          description: OK
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: App not found
      security:
      - Bearer: []
      tags:
      - app
    put:
      description: Changes the maximum limit of units allowed for use.
      operationId: AppQuotaChange
      parameters:
      - description: App name.
        in: path
        name: app
        required: true
        schema:
          minLength: 1
          type: string
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                limit:
                  description: Number of units allowed for use by the current app. Negative number indicates unlimited.
                  type: number
              required:
              - limit
        required: true
      responses:
        200:
          content: {}
          description: Quota updated
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        403:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Limit lower than allocated
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: App not found
      security:
      - Bearer: []
      tags:
      - app
  /1.0/apps/{app}/start:
    post:
      description: Start App.
      operationId: AppStart
      parameters:
      - description: App name.
        in: path
        name: app
        required: true
        schema:
          minLength: 1
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AppStartStop'
        required: true
      responses:
        200:
          content: {}
          description: App started
        401:
          content:
            application/x-json-stream:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        404:
          content:
            application/x-json-stream:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: App not found
      security:
      - Bearer: []
      tags:
      - app
  /1.0/apps/{app}/stop:
    post:
      description: Stop App.
      operationId: AppStop
      parameters:
      - description: App name.
        in: path
        name: app
        required: true
        schema:
          minLength: 1
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AppStartStop'
        required: true
      responses:
        200:
          content: {}
          description: App stopped
        401:
          content:
            application/x-json-stream:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        404:
          content:
            application/x-json-stream:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: App not found
      security:
      - Bearer: []
      tags:
      - app
  /1.0/apps/{app}/restart:
    post:
      description: Restart App.
      operationId: AppRestart
      parameters:
      - description: App name.
        in: path
        name: app
        required: true
        schema:
          minLength: 1
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AppStartStop'
        required: true
      responses:
        200:
          content: {}
          description: App restarted
        401:
          content:
            application/x-json-stream:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        404:
          content:
            application/x-json-stream:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: App not found
      security:
      - Bearer: []
      tags:
      - app
  /1.8/apps/{app}/routable:
    post:
      description: Sets a version as routable.
      operationId: AppSetRoutable
      parameters:
      - description: App name.
        in: path
        name: app
        required: true
        schema:
          minLength: 1
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetRoutableArgs'
        required: true
      responses:
        200:
          content: {}
          description: App updated
        400:
          content: {}
          description: Invalid arguments
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: App not found
      security:
      - Bearer: []
      tags:
      - app
  /1.5/apps/{app}/routers:
    get:
      description: list routers from an app
      operationId: AppRouterList
      parameters:
      - description: App name.
        in: path
        name: app
        required: true
        schema:
          minLength: 1
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppRouterList'
          description: Routers list
        204:
          content: {}
          description: No content
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: App not found
      security:
      - Bearer: []
      tags:
      - app
    post:
      description: adds a router to app
      operationId: AppRouterAdd
      parameters:
      - description: App name.
        in: path
        name: app
        required: true
        schema:
          minLength: 1
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AppRouter'
        required: true
      responses:
        200:
          content: {}
          description: Router added
        400:
          content: {}
          description: Invalid data
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: App not found
      security:
      - Bearer: []
      tags:
      - app
  /1.5/apps/{app}/routers/{router}:
    delete:
      description: Delete a tsuru app.
      operationId: AppRouterDelete
      parameters:
      - description: App name.
        in: path
        name: app
        required: true
        schema:
          minLength: 1
          type: string
      - description: Router name
        in: path
        name: router
        required: true
        schema:
          minLength: 1
          type: string
      responses:
        200:
          content: {}
          description: App removed.
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized.
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: App not found.
      security:
      - Bearer: []
      tags:
      - app
    put:
      description: update a router
      operationId: AppRouterUpdate
      parameters:
      - description: App name.
        in: path
        name: app
        required: true
        schema:
          minLength: 1
          type: string
      - description: Router name
        in: path
        name: router
        required: true
        schema:
          minLength: 1
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AppRouter'
        required: true
      responses:
        200:
          content: {}
          description: Router updated
        400:
          content: {}
          description: Invalid data
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: App not found
      security:
      - Bearer: []
      tags:
      - app
  /1.0/apps/{app}/teams/{team}:
    delete:
      description: grant access to a team
      operationId: AppTeamRevoke
      parameters:
      - description: App name.
        in: path
        name: app
        required: true
        schema:
          minLength: 1
          type: string
      - description: Team name
        in: path
        name: team
        required: true
        schema:
          minLength: 1
          type: string
      responses:
        200:
          content: {}
          description: Access revoked
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        403:
          content: {}
          description: Forbidden
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: App or team not found
      security:
      - Bearer: []
      tags:
      - app
    put:
      description: grant access to a team
      operationId: AppTeamGrant
      parameters:
      - description: App name.
        in: path
        name: app
        required: true
        schema:
          minLength: 1
          type: string
      - description: Team name
        in: path
        name: team
        required: true
        schema:
          minLength: 1
          type: string
      responses:
        200:
          content: {}
          description: Access granted
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: App or team not found
        409:
          content: {}
          description: Grant already exists
      security:
      - Bearer: []
      tags:
      - app
  /1.0/apps/{app}/units:
    delete:
      description: Remove units from app
      operationId: UnitsRemove
      parameters:
      - description: App name.
        in: path
        name: app
        required: true
        schema:
          minLength: 1
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnitsDelta'
        description: number of units to remove
        required: true
      responses:
        200:
          content: {}
          description: Access revoked
        400:
          content:
            application/x-json-stream:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Invalid data
        401:
          content:
            application/x-json-stream:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        403:
          content: {}
          description: Forbidden
        404:
          content:
            application/x-json-stream:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: App or team not found
      security:
      - Bearer: []
      tags:
      - app
    put:
      description: Add units to app
      operationId: UnitsAdd
      parameters:
      - description: App name.
        in: path
        name: app
        required: true
        schema:
          minLength: 1
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnitsDelta'
        description: number of units to add
        required: true
      responses:
        200:
          content: {}
          description: Access revoked
        400:
          content:
            application/x-json-stream:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Invalid data
        401:
          content:
            application/x-json-stream:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        403:
          content: {}
          description: Forbidden
        404:
          content:
            application/x-json-stream:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: App or team not found
      security:
      - Bearer: []
      tags:
      - app
  /1.9/apps/{app}/units/autoscale:
    delete:
      description: Remove unit autoscale spec.
      operationId: AutoScaleRemove
      parameters:
      - description: App name.
        in: path
        name: app
        required: true
        schema:
          minLength: 1
          type: string
      - in: query
        name: process
        required: true
        schema:
          type: string
      responses:
        200:
          content: {}
          description: AutoScale removed
        401:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        404:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: App not found
      security:
      - Bearer: []
      tags:
      - app
    get:
      description: List autoscales for app.
      operationId: AutoScaleInfo
      parameters:
      - description: App name.
        in: path
        name: app
        required: true
        schema:
          minLength: 1
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/AutoScaleSpec'
                type: array
          description: AutoScale info
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        403:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: App not found
      security:
      - Bearer: []
      tags:
      - app
    post:
      description: Add new unit autoscale spec.
      operationId: AutoScaleAdd
      parameters:
      - description: App name.
        in: path
        name: app
        required: true
        schema:
          minLength: 1
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AutoScaleSpec'
        required: true
      responses:
        200:
          content: {}
          description: AutoScale updated
        400:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Invalid data
        401:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        404:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: App not found
      security:
      - Bearer: []
      tags:
      - app
  /1.0/platforms/{platform}:
    delete:
      description: Delete platform.
      operationId: PlatformDelete
      parameters:
      - description: Platform name.
        in: path
        name: platform
        required: true
        schema:
          minLength: 1
          type: string
      responses:
        200:
          content: {}
          description: Platform removed
        401:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        404:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Not found
      security:
      - Bearer: []
      tags:
      - platform
    put:
      description: Update platform.
      operationId: PlatformUpdate
      parameters:
      - description: Platform name.
        in: path
        name: platform
        required: true
        schema:
          minLength: 1
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                dockerfile_content:
                  format: binary
                  type: string
              required:
              - dockerfile_content
        required: true
      responses:
        200:
          content: {}
          description: Platform updated
        401:
          content:
            application/x-json-stream:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        404:
          content:
            application/x-json-stream:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Not found
      security:
      - Bearer: []
      tags:
      - platform
  /1.0/platforms:
    get:
      description: List platforms.
      operationId: PlatformList
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Platform'
                type: array
          description: Platform list
        204:
          content: {}
          description: No content
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
      security:
      - Bearer: []
      tags:
      - platform
    post:
      description: Add new platform.
      operationId: PlatformAdd
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                name:
                  type: string
                dockerfile_content:
                  format: binary
                  type: string
              required:
              - dockerfile_content
              - name
        required: true
      responses:
        200:
          content: {}
          description: Platform created
        400:
          content:
            application/x-json-stream:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Invalid data
        401:
          content:
            application/x-json-stream:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
      security:
      - Bearer: []
      tags:
      - platform
  /1.6/platforms/{platform}:
    get:
      description: Platform info.
      operationId: PlatformInfo
      parameters:
      - description: Platform info.
        in: path
        name: platform
        required: true
        schema:
          minLength: 1
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformInfo'
          description: Platform info
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Not found
      security:
      - Bearer: []
      tags:
      - platform
  /1.6/platforms/{platform}/rollback:
    post:
      description: Platform rollback.
      operationId: PlatformRollback
      parameters:
      - description: Platform name.
        in: path
        name: platform
        required: true
        schema:
          minLength: 1
          type: string
      - in: query
        name: image
        required: true
        schema:
          type: string
      responses:
        200:
          content: {}
          description: Ok
        400:
          content:
            application/x-json-stream:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Invalid data
        401:
          content:
            application/x-json-stream:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        404:
          content:
            application/x-json-stream:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Not found
      security:
      - Bearer: []
      tags:
      - platform
  /1.0/teams:
    get:
      description: List teams.
      operationId: TeamsList
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Team'
                type: array
          description: Team list.
        204:
          content: {}
          description: No content.
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
      security:
      - Bearer: []
      tags:
      - team
    post:
      description: Create a team.
      operationId: TeamCreate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeamCreateArgs'
        required: true
      responses:
        201:
          content: {}
          description: Team created.
        400:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Invalid data
        401:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        409:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Team already exists
      security:
      - Bearer: []
      tags:
      - team
  /1.0/teams/{team}:
    delete:
      description: Delete a team.
      operationId: TeamDelete
      parameters:
      - description: Team name.
        in: path
        name: team
        required: true
        schema:
          type: string
      responses:
        200:
          content: {}
          description: Team removed.
        401:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        403:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Forbidden
        404:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Team not found
      security:
      - Bearer: []
      tags:
      - team
  /1.4/teams/{team}:
    get:
      description: Get a team.
      operationId: TeamGet
      parameters:
      - description: Team name.
        in: path
        name: team
        required: true
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamInfo'
          description: Team data
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Team not found
      security:
      - Bearer: []
      tags:
      - team
  /1.17/teams/{team}/users:
    get:
      description: Get users of a team
      operationId: TeamUserList
      parameters:
      - description: Team name.
        in: path
        name: team
        required: true
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TeamUser'
                type: array
          description: User list
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Team not found
      security:
      - Bearer: []
      tags:
      - team
  /1.17/teams/{team}/groups:
    get:
      description: Get groups of a team
      operationId: TeamGroupList
      parameters:
      - description: Team name.
        in: path
        name: team
        required: true
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TeamGroup'
                type: array
          description: Group list
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Team not found
      security:
      - Bearer: []
      tags:
      - team
  /1.6/teams/{team}:
    put:
      description: Update a team.
      operationId: TeamUpdate
      parameters:
      - description: Team name.
        in: path
        name: team
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeamUpdateArgs'
        required: true
      responses:
        200:
          content: {}
          description: Team updated
        400:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        401:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Invalid data
        404:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Team not found
      security:
      - Bearer: []
      tags:
      - team
  /1.12/teams/{team}/quota:
    get:
      description: Get quota of a team.
      operationId: TeamQuotaGet
      parameters:
      - description: Team name.
        in: path
        name: team
        required: true
        schema:
          minLength: 1
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserQuotaViewResponse'
          description: OK
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Team not found
      security:
      - Bearer: []
      tags:
      - team
    put:
      description: Changes the team's apps limit.
      operationId: TeamQuotaChange
      parameters:
      - description: Team name.
        in: path
        name: team
        required: true
        schema:
          minLength: 1
          type: string
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                limit:
                  description: New limit of apps. Negative number indicates unlimited.
                  type: number
              required:
              - limit
        required: true
      responses:
        200:
          content: {}
          description: Quota updated
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        403:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Limit lower than allocated
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Team not found
      security:
      - Bearer: []
      tags:
      - team
  /1.0/users:
    delete:
      description: Delete an user.
      operationId: UserDelete
      parameters:
      - description: User e-mail.
        in: query
        name: email
        required: true
        schema:
          minLength: 1
          type: string
      responses:
        200:
          content: {}
          description: User removed
        401:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        404:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Not found
      security:
      - Bearer: []
      tags:
      - user
    get:
      description: List users.
      operationId: UsersList
      parameters:
      - in: query
        name: userEmail
        required: true
        schema:
          type: string
      - in: query
        name: role
        schema:
          type: string
      - in: query
        name: context
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/User'
                type: array
          description: List users.
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
      security:
      - Bearer: []
      tags:
      - user
    post:
      description: Create a new user.
      operationId: UserCreate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserData'
        required: true
      responses:
        201:
          content: {}
          description: User created.
        400:
          content:
            application/x-json-stream:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Invalid data
        401:
          content:
            application/x-json-stream:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        403:
          content:
            application/x-json-stream:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Forbidden
        409:
          content:
            application/x-json-stream:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: User already exists
      security:
      - Bearer: []
      tags:
      - user
  /1.0/users/api-key:
    get:
      description: Show the API token of an user.
      operationId: APITokenGet
      parameters:
      - in: query
        name: email
        required: true
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                type: string
          description: API TOKEN
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: User not found
      security:
      - Bearer: []
      tags:
      - user
    post:
      description: Regenerate the API Token of an user.
      operationId: APITokenRegenerate
      parameters:
      - in: query
        name: email
        required: true
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                type: string
          description: API TOKEN
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: User not found
      security:
      - Bearer: []
      tags:
      - user
  /1.0/users/info:
    get:
      description: Get information on logged user.
      operationId: UserGet
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: OK
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
      security:
      - Bearer: []
      tags:
      - user
  /1.0/users/{email}/quota:
    get:
      description: Get quota of an user.
      operationId: UserQuotaGet
      parameters:
      - description: User e-mail.
        in: path
        name: email
        required: true
        schema:
          minLength: 1
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserQuotaViewResponse'
          description: OK
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: User not found
      security:
      - Bearer: []
      tags:
      - user
    put:
      description: Change quota of an user.
      operationId: UserQuotaChange
      parameters:
      - description: User e-mail.
        in: path
        name: email
        required: true
        schema:
          minLength: 1
          type: string
      - description: User new quota.
        in: query
        name: limit
        required: true
        schema:
          type: integer
      responses:
        200:
          content: {}
          description: Quota successfully updated
        400:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Invalid data
        401:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        404:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: User not found
      security:
      - Bearer: []
      tags:
      - user
  /1.0/users/password:
    put:
      description: Change password of logged user.
      operationId: ChangePassword
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordData'
        required: true
      responses:
        200:
          content: {}
          description: Ok
        400:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Invalid data
        401:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        403:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Forbidden
        404:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Not found
      security:
      - Bearer: []
      tags:
      - user
  /1.0/users/{email}/password:
    post:
      description: Reset password of an user.
      operationId: ResetPassword
      parameters:
      - in: path
        name: email
        required: true
        schema:
          minLength: 1
          type: string
      requestBody:
        content:
          application/json:
            schema:
              minLength: 1
              type: string
        required: true
      responses:
        200:
          content: {}
          description: Ok
        400:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Invalid data
        401:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        403:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Forbidden
        404:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Not found
      security:
      - Bearer: []
      tags:
      - user
  /1.0/users/tokens:
    delete:
      description: Logout.
      operationId: UserTokenDelete
      responses:
        200:
          content: {}
          description: Ok
      security:
      - Bearer: []
      tags:
      - user
  /1.4/volumes:
    get:
      description: List volumes.
      operationId: VolumeList
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Volume'
                type: array
          description: List volumes
        204:
          content: {}
          description: No content
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
      security:
      - Bearer: []
      tags:
      - volume
    post:
      description: Create volume.
      operationId: VolumeCreate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Volume'
        required: true
      responses:
        201:
          content: {}
          description: Volume created
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        409:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Volume already exists
      security:
      - Bearer: []
      tags:
      - volume
  /1.0/pools:
    get:
      description: List pools.
      operationId: PoolList
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Pool'
                type: array
          description: Pools list
        204:
          content: {}
          description: No content
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
      security:
      - Bearer: []
      tags:
      - pool
    post:
      description: Creates a pool.
      operationId: PoolCreate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PoolCreateData'
        required: true
      responses:
        201:
          content: {}
          description: Pool created
        400:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Invalid data
        401:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        409:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Pool already exists
      security:
      - Bearer: []
      tags:
      - pool
  /pools/{pool}:
    delete:
      description: Deletes a pool.
      operationId: PoolDelete
      parameters:
      - in: path
        name: pool
        required: true
        schema:
          type: string
      responses:
        200:
          content: {}
          description: Pool deleted
        401:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        403:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Pool still has apps
        404:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Pool not found
      security:
      - Bearer: []
      tags:
      - pool
    get:
      description: Get pool information
      operationId: PoolGet
      parameters:
      - in: path
        name: pool
        required: true
        schema:
          type: string
      responses:
        200:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Pool'
          description: Pool data
        401:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        404:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Pool not found
      security:
      - Bearer: []
      tags:
      - pool
    put:
      description: Updates a pool.
      operationId: PoolUpdate
      parameters:
      - in: path
        name: pool
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PoolUpdateData'
        required: true
      responses:
        200:
          content: {}
          description: Pool updated
        401:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        404:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Pool not found
        409:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Default pool already defined
      security:
      - Bearer: []
      tags:
      - pool
  /1.3/provisioner/clusters:
    get:
      description: List cluster
      operationId: ClusterList
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Cluster'
                type: array
          description: Cluster
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Cluster not found
      security:
      - Bearer: []
      tags:
      - cluster
    post:
      description: Create cluster.
      operationId: ClusterCreate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Cluster'
        required: true
      responses:
        200:
          content: {}
          description: Cluster created
        401:
          content:
            application/x-json-stream:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        404:
          content:
            application/x-json-stream:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Cluster not found
      security:
      - Bearer: []
      tags:
      - cluster
  /1.3/provisioner/clusters/{cluster_name}:
    delete:
      description: Delete cluster.
      operationId: ClusterDelete
      parameters:
      - description: Cluster name.
        in: path
        name: cluster_name
        required: true
        schema:
          minLength: 1
          type: string
      responses:
        200:
          content: {}
          description: Cluster deleted
        401:
          content:
            application/x-json-stream:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        404:
          content:
            application/x-json-stream:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Cluster not found
      security:
      - Bearer: []
      tags:
      - cluster
  /1.4/provisioner/clusters/{cluster_name}:
    post:
      description: Update cluster.
      operationId: ClusterUpdate
      parameters:
      - description: Cluster name.
        in: path
        name: cluster_name
        required: true
        schema:
          minLength: 1
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Cluster'
        required: true
      responses:
        200:
          content: {}
          description: Cluster updated
        400:
          content:
            application/x-json-stream:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Invalid data
        401:
          content:
            application/x-json-stream:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        404:
          content:
            application/x-json-stream:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Cluster not found
      security:
      - Bearer: []
      tags:
      - cluster
  /1.8/provisioner/clusters/{cluster_name}:
    get:
      description: Cluster info
      operationId: ClusterInfo
      parameters:
      - description: Cluster name.
        in: path
        name: cluster_name
        required: true
        schema:
          minLength: 1
          type: string
          x-exportParamName: ClusterName
        x-exportParamName: ClusterName
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cluster'
          description: Cluster
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Cluster not found
      security:
      - Bearer: []
      tags:
      - cluster
  /1.4/volumes/{volume}:
    delete:
      description: Delete volume.
      operationId: VolumeDelete
      parameters:
      - description: Volume name.
        in: path
        name: volume
        required: true
        schema:
          minLength: 1
          type: string
      responses:
        200:
          content: {}
          description: Volume deleted
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Volume not found
      security:
      - Bearer: []
      tags:
      - volume
    get:
      description: Get a volume.
      operationId: VolumeGet
      parameters:
      - description: Volume name.
        in: path
        name: volume
        required: true
        schema:
          minLength: 1
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Volume'
          description: Volume
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        409:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Volume already exists
      security:
      - Bearer: []
      tags:
      - volume
    put:
      description: Update volume.
      operationId: VolumeUpdate
      parameters:
      - description: Volume name.
        in: path
        name: volume
        required: true
        schema:
          minLength: 1
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VolumeUpdateData'
        required: true
      responses:
        200:
          content: {}
          description: Volume updated
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Volume not found
      security:
      - Bearer: []
      tags:
      - volume
  /1.4/volumes/{volume}/bind:
    delete:
      description: Unbind volume.
      operationId: VolumeUnbind
      parameters:
      - description: Volume name.
        in: path
        name: volume
        required: true
        schema:
          minLength: 1
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/VolumeBindData'
        required: true
      responses:
        200:
          content: {}
          description: Volume unbinded
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Volume not found
      security:
      - Bearer: []
      tags:
      - volume
    post:
      description: Bind volume.
      operationId: VolumeBind
      parameters:
      - description: Volume name.
        in: path
        name: volume
        required: true
        schema:
          minLength: 1
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VolumeBindData'
        required: true
      responses:
        200:
          content: {}
          description: Volume bind
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Volume not found
        409:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Volume bind already exists
      security:
      - Bearer: []
      tags:
      - volume
  /1.4/volumeplans:
    get:
      description: List volume plans.
      operationId: VolumePlansList
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VolumePlansListResponse'
          description: Volume plans list
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
      security:
      - Bearer: []
      tags:
      - volume
  /1.0/roles:
    post:
      description: create a role
      operationId: CreateRole
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleAddData'
        required: true
      responses:
        201:
          content: {}
          description: Role created
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Invalid data
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        409:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Role already exists
      security:
      - Bearer: []
      tags:
      - auth
    put:
      description: update a role
      operationId: UpdateRole
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleUpdateData'
        required: true
      responses:
        201:
          content: {}
          description: Role updated
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Invalid data
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
      security:
      - Bearer: []
      tags:
      - auth
  /1.0/roles/{role_name}:
    delete:
      description: delete a role
      operationId: DeleteRole
      parameters:
      - in: path
        name: role_name
        required: true
        schema:
          type: string
      responses:
        200:
          content: {}
          description: Role deleted.
        401:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized.
        404:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Role  not found
      security:
      - Bearer: []
      tags:
      - auth
  /1.0/roles/{role_name}/permissions:
    post:
      description: add a permission
      operationId: PermissionAdd
      parameters:
      - in: path
        name: role_name
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PermissionData'
        required: true
      responses:
        200:
          content: {}
          description: Permission created.
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Invalid data
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized.
        409:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Permission not a allowed
      security:
      - Bearer: []
      tags:
      - auth
  /1.0/roles{role_name}/permissions/{permission}:
    delete:
      description: remove a permission
      operationId: RemovePermission
      parameters:
      - in: path
        name: role_name
        required: true
        schema:
          type: string
      - in: path
        name: permission
        required: true
        schema:
          type: string
      responses:
        200:
          content: {}
          description: Permission removed.
        401:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized.
        404:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Not found
      security:
      - Bearer: []
      tags:
      - auth
  /1,0/roles/{role_name}/user:
    post:
      description: assign a role
      operationId: Role assign
      parameters:
      - in: path
        name: role_name
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleAssignData'
        required: true
      responses:
        200:
          content: {}
          description: Role assigned.
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Invalid data.
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized.
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Role not found
      security:
      - Bearer: []
      tags:
      - auth
  /1.0/roles/{role_name}/user/{email}:
    delete:
      description: Dissociate a role from user
      operationId: DissociateRole
      parameters:
      - in: path
        name: role_name
        required: true
        schema:
          type: string
      - in: path
        name: email
        required: true
        schema:
          type: string
      responses:
        200:
          content: {}
          description: Role dissociated.
        400:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Invalid data.
        401:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized.
        404:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Role or token not found
      security:
      - Bearer: []
      tags:
      - auth
  /1.0/role/default:
    delete:
      description: Delete a Default role
      operationId: RoleDefaultDelete
      responses:
        200:
          content: {}
          description: Default role deleted.
        400:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Invalid data.
        401:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized.
      security:
      - Bearer: []
      tags:
      - auth
    post:
      description: add a default role
      operationId: DefaultRoleAdd
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleDefaultData'
        required: true
      responses:
        200:
          content: {}
          description: Default role created.
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Invalid data
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized.
      security:
      - Bearer: []
      tags:
      - auth
  /1.6/roles/{role_name}/token:
    post:
      description: Assigns a role to a team token.
      operationId: AssignRoleToToken
      parameters:
      - in: path
        name: role_name
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssignTokenArgs'
        required: true
      responses:
        200:
          content: {}
          description: Role assigned.
        401:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized.
        404:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Role or token not found
      security:
      - Bearer: []
      tags:
      - auth
  /1.6/roles/{role_name}/token/{token_id}:
    delete:
      description: Dissociates a role from a team token.
      operationId: DissociateRoleFromToken
      parameters:
      - in: path
        name: role_name
        required: true
        schema:
          type: string
      - in: path
        name: token_id
        required: true
        schema:
          type: string
      - in: query
        name: context
        required: true
        schema:
          type: string
      responses:
        200:
          content: {}
          description: Role dissociated.
        401:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized.
        404:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Role or token not found
      security:
      - Bearer: []
      tags:
      - auth
  /1.6/tokens:
    get:
      description: List team tokens.
      operationId: TeamTokensList
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TeamToken'
                type: array
          description: Team tokens list.
        204:
          content: {}
          description: No content.
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized.
      security:
      - Bearer: []
      tags:
      - auth
    post:
      description: Creates a team token.
      operationId: TeamTokenCreate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeamTokenCreateArgs'
        required: true
      responses:
        201:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamToken'
          description: Team token created.
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized.
        409:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Token with the same ID already exists.
      security:
      - Bearer: []
      tags:
      - auth
  /1.6/tokens/{token_id}:
    delete:
      description: Deletes a team token.
      operationId: TeamTokenDelete
      parameters:
      - description: Token ID.
        in: path
        name: token_id
        required: true
        schema:
          minLength: 1
          type: string
      responses:
        200:
          content: {}
          description: Team token deleted.
        401:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized.
        404:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Team token not found.
      security:
      - Bearer: []
      tags:
      - auth
    put:
      description: Updates a team token.
      operationId: TeamTokenUpdate
      parameters:
      - description: Token ID.
        in: path
        name: token_id
        required: true
        schema:
          minLength: 1
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeamTokenUpdateArgs'
        required: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamToken'
          description: Team token updated.
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized.
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Team token not found.
      security:
      - Bearer: []
      tags:
      - auth
  /1.7/tokens/{token_id}:
    get:
      description: Shows information about a specific token.
      operationId: TeamTokenInfo
      parameters:
      - description: Token ID.
        in: path
        name: token_id
        required: true
        schema:
          minLength: 1
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamToken'
          description: Team token info.
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized.
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Team token not found.
      security:
      - Bearer: []
      tags:
      - auth
  /1.1/events/{eventid}:
    get:
      operationId: EventInfo
      parameters:
      - in: path
        name: eventid
        required: true
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
          description: Event info.
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized.
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Team token not found.
      security:
      - Bearer: []
      tags:
      - event
  /1.1/events/{eventid}/cancel:
    post:
      operationId: EventCancel
      parameters:
      - in: path
        name: eventid
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventCancelArgs'
        required: true
      responses:
        204:
          content: {}
          description: Event cancellation requested.
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Invalid data
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized.
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Event not found
      security:
      - Bearer: []
      tags:
      - event
  /1.6/events/webhooks:
    get:
      operationId: WebhookList
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Webhook'
                type: array
          description: Webhooks list.
        204:
          content: {}
          description: No content.
      security:
      - Bearer: []
      tags:
      - event
    post:
      operationId: WebhookCreate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Webhook'
        required: true
      responses:
        200:
          content: {}
          description: Webhook created.
        400:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Invalid data
        401:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized.
        409:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Webhook already exists.
      security:
      - Bearer: []
      tags:
      - event
  /1.6/events/webhooks/{name}:
    delete:
      operationId: WebhookDelete
      parameters:
      - description: Webhook name.
        in: path
        name: name
        required: true
        schema:
          minLength: 1
          type: string
      responses:
        200:
          content: {}
          description: Webhook created.
        400:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Invalid data
        401:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized.
        404:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Webhook not found.
      security:
      - Bearer: []
      tags:
      - event
    get:
      operationId: WebhookGet
      parameters:
      - description: Webhook name.
        in: path
        name: name
        required: true
        schema:
          minLength: 1
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Webhook'
          description: Webhook.
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized.
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Not founds.
      security:
      - Bearer: []
      tags:
      - event
    put:
      operationId: WebhookUpdate
      parameters:
      - description: Webhook name.
        in: path
        name: name
        required: true
        schema:
          minLength: 1
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Webhook'
        required: true
      responses:
        200:
          content: {}
          description: Webhook updated.
        400:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Invalid data
        401:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized.
        404:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Webhook not found.
      security:
      - Bearer: []
      tags:
      - event
  /1.7/provisioner:
    get:
      description: List provisioners
      operationId: ProvisionerList
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Provisioner'
                type: array
          description: Provisioner
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
      security:
      - Bearer: []
      tags:
      - cluster
  /1.3/constraints:
    get:
      description: List pool constraints
      operationId: ConstraintList
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/PoolConstraint'
                type: array
          description: PoolConstraints
        204:
          content: {}
          description: No content
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
      security:
      - Bearer: []
      tags:
      - pool
    put:
      description: Update a service instance
      operationId: ConstraintSet
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PoolConstraintSet'
        required: true
      responses:
        200:
          content: {}
          description: Pool constraint set
        400:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Invalid data
        401:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
      security:
      - Bearer: []
      tags:
      - pool
  /1.3/routers:
    get:
      description: List available routers
      operationId: RouterList
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/PlanRouter'
                type: array
          description: Routers
        204:
          content: {}
          description: No content
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
      security:
      - Bearer: []
      tags:
      - router
  /1.8/routers:
    post:
      description: Adds a new dynamic router
      operationId: RouterCreate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DynamicRouter'
        required: true
      responses:
        201:
          content: {}
          description: Dynamic router added
        400:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Invalid data
        401:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
      security:
      - Bearer: []
      tags:
      - router
  /1.8/routers/{name}:
    delete:
      description: Deletes a dynamic router
      operationId: RouterDelete
      parameters:
      - description: Dynamic router name.
        in: path
        name: name
        required: true
        schema:
          minLength: 1
          type: string
      responses:
        200:
          content: {}
          description: Dynamic router deleted
        401:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized.
        404:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Dynamic router not found
      security:
      - Bearer: []
      tags:
      - router
    put:
      description: Updates a dynamic router
      operationId: RouterUpdate
      parameters:
      - description: Dynamic router name.
        in: path
        name: name
        required: true
        schema:
          minLength: 1
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DynamicRouter'
        required: true
      responses:
        200:
          content: {}
          description: Dynamic router updated
        401:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized.
        404:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Dynamic router not found
      security:
      - Bearer: []
      tags:
      - router
  /1.9/roles/{role_name}/group:
    post:
      description: Assigns a role to a group.
      operationId: AssignRoleToGroup
      parameters:
      - in: path
        name: role_name
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssignGroupArgs'
        required: true
      responses:
        200:
          content: {}
          description: Role assigned.
        401:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized.
        404:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Role not found
      security:
      - Bearer: []
      tags:
      - auth
  /1.6/roles/{role_name}/group/{group_name}:
    delete:
      description: Dissociates a role from a group.
      operationId: DissociateRoleFromGroup
      parameters:
      - in: path
        name: role_name
        required: true
        schema:
          type: string
      - in: path
        name: group_name
        required: true
        schema:
          type: string
      - in: query
        name: context
        required: true
        schema:
          type: string
      responses:
        200:
          content: {}
          description: Role dissociated.
        401:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized.
        404:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Role not found
      security:
      - Bearer: []
      tags:
      - auth
  /1.13/jobs:
    get:
      description: List jobs that runs periodically
      operationId: ListJob
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobList'
          description: JobList.
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized.
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Not founds.
      security:
      - Bearer: []
      tags:
      - job
    post:
      description: Create a job that runs periodically
      operationId: CreateJob
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InputJob'
        required: true
      responses:
        201:
          content: {}
          description: Job created
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Invalid data
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        403:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Quota exceeded
        409:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: App already exists
      security:
      - Bearer: []
      tags:
      - job
  /1.13/jobs/{name}:
    delete:
      description: Remove a job
      operationId: DeleteJob
      parameters:
      - description: Name of job
        in: path
        name: name
        required: true
        schema:
          minLength: 1
          type: string
      responses:
        200:
          content: {}
          description: Job removed
        401:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        404:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Plan not found
      security:
      - Bearer: []
      tags:
      - job
    get:
      description: Get a job that runs periodically
      operationId: GetJob
      parameters:
      - description: Name of job
        in: path
        name: name
        required: true
        schema:
          minLength: 1
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobInfo'
          description: JobInfo.
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized.
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Not founds.
      security:
      - Bearer: []
      tags:
      - job
    put:
      description: Update a job that runs periodically
      operationId: UpdateJob
      parameters:
      - description: Name of job
        in: path
        name: name
        required: true
        schema:
          minLength: 1
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InputJob'
        required: true
      responses:
        200:
          content: {}
          description: Job Updated
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Invalid data
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        403:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Quota exceeded
        409:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: App already exists
      security:
      - Bearer: []
      tags:
      - job
  /1.13/jobs/{name}/trigger:
    post:
      description: Trigger a job
      operationId: TriggerJob
      parameters:
      - description: Name of job
        in: path
        name: name
        required: true
        schema:
          minLength: 1
          type: string
      responses:
        200:
          content: {}
          description: Job triggered
        401:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        404:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Plan not found
      security:
      - Bearer: []
      tags:
      - job
  /1.13/jobs/{name}/log:
    get:
      description: Retrieve logs from a job
      operationId: JobLog
      parameters:
      - description: Name of job
        in: path
        name: name
        required: true
        schema:
          minLength: 1
          type: string
      - description: attach logs to tty
        in: query
        name: follow
        schema:
          type: boolean
      responses:
        200:
          content: {}
          description: OK
        400:
          content:
            application/x-json-stream:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Invalid data
        403:
          content:
            application/x-json-stream:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Forbidden
        404:
          content:
            application/x-json-stream:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Job not found
      security:
      - Bearer: []
      tags:
      - job
  /1.13/jobs/{name}/env:
    delete:
      description: Unset job environment variables.
      operationId: JobEnvUnset
      parameters:
      - description: Job name.
        in: path
        name: name
        required: true
        schema:
          minLength: 1
          type: string
      - explode: true
        in: query
        name: env
        required: true
        schema:
          items:
            type: string
          minItems: 1
          type: array
        style: form
      responses:
        200:
          content: {}
          description: Envs deleted
        400:
          content:
            application/x-json-stream:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Invalid data
        401:
          content:
            application/x-json-stream:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        404:
          content:
            application/x-json-stream:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Job not found
      security:
      - Bearer: []
      tags:
      - job
    post:
      description: Set new environment variable.
      operationId: JobEnvSet
      parameters:
      - description: Job name.
        in: path
        name: name
        required: true
        schema:
          minLength: 1
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnvSetData'
        description: Environment variables.
        required: true
      responses:
        200:
          content: {}
          description: Envs updated
        400:
          content:
            application/x-json-stream:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Invalid data
        401:
          content:
            application/x-json-stream:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        404:
          content:
            application/x-json-stream:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Job not found
      security:
      - Bearer: []
      tags:
      - job
  /1.16/jobs/{name}/env:
    get:
      description: Get job environment variables.
      operationId: JobEnvGet
      parameters:
      - description: Job name.
        in: path
        name: name
        required: true
        schema:
          minLength: 1
          type: string
      - description: Environment variable name.
        in: query
        name: env
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/EnvVar'
                type: array
          description: Environment variables
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Job not found
      security:
      - Bearer: []
      tags:
      - job
components:
  schemas:
    App:
      description: Tsuru app.
      example:
        cluster: cluster
        metadata:
          annotations:
          - name: name
            value: value
            delete: true
          - name: name
            value: value
            delete: true
          labels:
          - name: name
            value: value
            delete: true
          - name: name
            value: value
            delete: true
        cname:
        - cname
        - cname
        deploys: 0
        description: description
        units:
        - address:
            scheme: scheme
            host: host
          routable: true
          processname: processname
          ip: ip
          type: type
          version: 0
          restarts: 6
          createdAt: createdAt
          appname: appname
          ready: true
          name: name
          id: id
          status: status
        - address:
            scheme: scheme
            host: host
          routable: true
          processname: processname
          ip: ip
          type: type
          version: 0
          restarts: 6
          createdAt: createdAt
          appname: appname
          ready: true
          name: name
          id: id
          status: status
        error: error
        platform: platform
        internalAddresses:
        - Version: Version
          Port: 5
          Process: Process
          Domain: Domain
          Protocol: Protocol
        - Version: Version
          Port: 5
          Process: Process
          Domain: Domain
          Protocol: Protocol
        router: router
        autoscaleRecommendation:
        - process: process
          recommendations:
          - memory: memory
            cpu: cpu
            type: type
          - memory: memory
            cpu: cpu
            type: type
        - process: process
          recommendations:
          - memory: memory
            cpu: cpu
            type: type
          - memory: memory
            cpu: cpu
            type: type
        quota:
          limit: 1
          inuse: 6
        routeropts:
          key: routeropts
        lock:
          owner: owner
          reason: reason
          acquireDate: 2000-01-23T04:56:07.000+00:00
          locked: true
        routers:
        - addresses:
          - addresses
          - addresses
          opts: '{}'
          name: name
        - addresses:
          - addresses
          - addresses
          opts: '{}'
          name: name
        plan:
          default: true
          memory: 0
          cpumilli: 0
          cpuBurst:
            default: 1.46581298050294517310021547018550336360931396484375
            maxAllowed: 5.962133916683182377482808078639209270477294921875
          name: name
          override:
            memory: 5
            cpumilli: 2
            cpuBurst: 7.061401241503109105224211816675961017608642578125
        owner: owner
        volumeBinds:
        - ReadOnly: true
          ID:
            App: App
            MountPoint: MountPoint
            Volume: Volume
        - ReadOnly: true
          ID:
            App: App
            MountPoint: MountPoint
            Volume: Volume
        processes:
        - metadata:
            annotations:
            - name: name
              value: value
              delete: true
            - name: name
              value: value
              delete: true
            labels:
            - name: name
              value: value
              delete: true
            - name: name
              value: value
              delete: true
          name: name
          plan: plan
        - metadata:
            annotations:
            - name: name
              value: value
              delete: true
            - name: name
              value: value
              delete: true
            labels:
            - name: name
              value: value
              delete: true
            - name: name
              value: value
              delete: true
          name: name
          plan: plan
        provisioner: provisioner
        dashboardURL: dashboardURL
        teams:
        - teams
        - teams
        ip: ip
        pool: pool
        autoscale:
        - process: process
          averageCPU: averageCPU
          schedules:
          - minReplicas: 7
            timezone: timezone
            name: name
            start: start
            end: end
          - minReplicas: 7
            timezone: timezone
            name: name
            start: start
            end: end
          maxUnits: 2
          minUnits: 5
          prometheus:
          - prometheusAddress: prometheusAddress
            query: query
            name: name
            threshold: 9.301444243932575517419536481611430644989013671875
            activationThreshold: 3.61607674925191080461672754609026014804840087890625
          - prometheusAddress: prometheusAddress
            query: query
            name: name
            threshold: 9.301444243932575517419536481611430644989013671875
            activationThreshold: 3.61607674925191080461672754609026014804840087890625
          behavior:
            scaleDown:
              stabilizationWindow: 4
              unitsPolicyValue: 7
              percentagePolicyValue: 1
          version: 2
        - process: process
          averageCPU: averageCPU
          schedules:
          - minReplicas: 7
            timezone: timezone
            name: name
            start: start
            end: end
          - minReplicas: 7
            timezone: timezone
            name: name
            start: start
            end: end
          maxUnits: 2
          minUnits: 5
          prometheus:
          - prometheusAddress: prometheusAddress
            query: query
            name: name
            threshold: 9.301444243932575517419536481611430644989013671875
            activationThreshold: 3.61607674925191080461672754609026014804840087890625
          - prometheusAddress: prometheusAddress
            query: query
            name: name
            threshold: 9.301444243932575517419536481611430644989013671875
            activationThreshold: 3.61607674925191080461672754609026014804840087890625
          behavior:
            scaleDown:
              stabilizationWindow: 4
              unitsPolicyValue: 7
              percentagePolicyValue: 1
          version: 2
        tags:
        - tags
        - tags
        teamOwner: teamOwner
        serviceInstanceBinds:
        - instance: instance
          service: service
          plan: plan
        - instance: instance
          service: service
          plan: plan
        name: name
        unitsMetrics:
        - memory: memory
          cpu: cpu
          id: id
        - memory: memory
          cpu: cpu
          id: id
      properties:
        name:
          description: App name.
          type: string
        cluster:
          description: Cluster name
          type: string
        cname:
          description: CNames of App
          items:
            type: string
          type: array
        deploys:
          description: Number of Deploys
          format: int64
          type: integer
        unitsMetrics:
          description: Unit metrics.
          items:
            $ref: '#/components/schemas/UnitMetrics'
          type: array
        autoscaleRecommendation:
          description: Autoscale Recommendations
          items:
            $ref: '#/components/schemas/RecommendedResources'
          type: array
        error:
          description: Errors during AppGet
          type: string
        quota:
          $ref: '#/components/schemas/Quota'
        serviceInstanceBinds:
          description: Service instance binds on the app
          items:
            $ref: '#/components/schemas/App_serviceInstanceBinds'
          type: array
        routers:
          items:
            $ref: '#/components/schemas/App_routers'
          type: array
        internalAddresses:
          items:
            $ref: '#/components/schemas/App_internalAddresses'
          type: array
        volumeBinds:
          items:
            $ref: '#/components/schemas/App_volumeBinds'
          type: array
        tags:
          description: App tags.
          items:
            type: string
          type: array
        metadata:
          $ref: '#/components/schemas/Metadata'
        processes:
          items:
            $ref: '#/components/schemas/AppProcess'
          type: array
        router:
          description: App router.
          type: string
        routeropts:
          additionalProperties:
            type: string
          description: Custom router options.
          type: object
        plan:
          $ref: '#/components/schemas/Plan'
        lock:
          $ref: '#/components/schemas/AppLock'
        pool:
          description: App pool.
          type: string
        provisioner:
          description: App provisioner.
          type: string
        platform:
          description: App platform.
          type: string
        description:
          description: App description.
          type: string
        teamOwner:
          description: Team that owns the app.
          type: string
        teams:
          items:
            type: string
          type: array
        units:
          items:
            $ref: '#/components/schemas/Unit'
          type: array
        ip:
          type: string
        owner:
          type: string
        autoscale:
          items:
            $ref: '#/components/schemas/AutoScaleSpec'
          type: array
        dashboardURL:
          type: string
      required:
      - name
      type: object
    VolumeBindData:
      example:
        app: app
        readonly: true
        norestart: true
        mountpoint: mountpoint
      properties:
        app:
          type: string
        mountpoint:
          type: string
        norestart:
          type: boolean
        readonly:
          type: boolean
      type: object
    JobServiceInstanceUnbind:
      example:
        force: true
      properties:
        force:
          type: boolean
      type: object
    RecommendedResources_recommendations:
      example:
        memory: memory
        cpu: cpu
        type: type
      properties:
        memory:
          type: string
        cpu:
          type: string
        type:
          type: string
    Platform:
      example:
        name: name
        disabled: true
      properties:
        name:
          type: string
        disabled:
          type: boolean
      type: object
    AutoScaleSchedule:
      description: Auto Scale schedules struct
      example:
        minReplicas: 7
        timezone: timezone
        name: name
        start: start
        end: end
      properties:
        name:
          type: string
        minReplicas:
          type: integer
        start:
          type: string
        end:
          type: string
        timezone:
          type: string
      type: object
    TeamTokenCreateArgs:
      description: Arguments for creating a new team token.
      example:
        token_id: token_id
        description: description
        team: team
        expires_in: 0
      properties:
        token_id:
          type: string
        description:
          type: string
        expires_in:
          description: Expire time in seconds.
          format: int64
          type: integer
        team:
          type: string
      type: object
    UnitsDelta:
      description: number of units to add or remove from a process
      example:
        process: process
        units: units
        version: version
      properties:
        units:
          type: string
        process:
          type: string
        version:
          type: string
      type: object
    AssignGroupArgs:
      description: Assign role to group arguments.
      example:
        group_name: group_name
        context: context
      properties:
        group_name:
          type: string
        context:
          type: string
      type: object
    Cluster_kubeConfig_cluster:
      example:
        server: server
        certificate-authority-data: certificate-authority-data
        tls-server-name: tls-server-name
        insecure-skip-tls-verify: true
      properties:
        server:
          type: string
        certificate-authority-data:
          type: string
        tls-server-name:
          type: string
        insecure-skip-tls-verify:
          type: boolean
      required:
      - server
    WebhookEventFilter:
      example:
        target_values:
        - target_values
        - target_values
        kind_names:
        - kind_names
        - kind_names
        kind_types:
        - kind_types
        - kind_types
        error_only: true
        success_only: true
        target_types:
        - target_types
        - target_types
      properties:
        target_types:
          items:
            type: string
          type: array
        target_values:
          items:
            type: string
          type: array
        kind_types:
          items:
            type: string
          type: array
        kind_names:
          items:
            type: string
          type: array
        error_only:
          type: boolean
        success_only:
          type: boolean
      type: object
    EnvVar:
      description: Environment variable.
      example:
        public: true
        managedBy: managedBy
        name: name
        alias: alias
        value: value
      properties:
        name:
          type: string
        value:
          type: string
        alias:
          type: string
        public:
          type: boolean
        managedBy:
          type: string
      type: object
    Pool:
      example:
        default: true
        provisioner: provisioner
        public: true
        teams:
        - teams
        - teams
        allowed:
          key:
          - allowed
          - allowed
        name: name
        labels:
          key: labels
      properties:
        name:
          type: string
        default:
          type: boolean
        provisioner:
          type: string
        public:
          type: boolean
        teams:
          items:
            type: string
          type: array
        allowed:
          additionalProperties:
            items:
              type: string
            type: array
          type: object
        labels:
          additionalProperties:
            type: string
          type: object
      type: object
    Event_Target:
      example:
        Type: Type
        Value: Value
      properties:
        Type:
          type: string
        Value:
          type: string
    PoolConstraint:
      example:
        Field: Field
        Values:
        - Values
        - Values
        Blacklist: true
        PoolExpr: PoolExpr
      properties:
        PoolExpr:
          type: string
        Field:
          type: string
        Values:
          items:
            type: string
          type: array
        Blacklist:
          type: boolean
      type: object
    PoolCreateData:
      example:
        default: true
        provisioner: provisioner
        public: true
        name: name
        force: true
        labels:
          key: labels
      properties:
        name:
          type: string
        public:
          type: boolean
        default:
          type: boolean
        force:
          type: boolean
        provisioner:
          type: string
        labels:
          additionalProperties:
            type: string
          type: object
      type: object
    TeamToken:
      description: An authorization token associated to a team.
      example:
        last_access: 2000-01-23T04:56:07.000+00:00
        expires_at: 2000-01-23T04:56:07.000+00:00
        token_id: token_id
        creator_email: creator_email
        roles:
        - name: name
          contextvalue: contextvalue
        - name: name
          contextvalue: contextvalue
        description: description
        created_at: 2000-01-23T04:56:07.000+00:00
        team: team
        token: token
      properties:
        token:
          type: string
        token_id:
          type: string
        description:
          type: string
        created_at:
          format: date-time
          type: string
        expires_at:
          format: date-time
          type: string
        last_access:
          format: date-time
          type: string
        creator_email:
          type: string
        team:
          type: string
        roles:
          items:
            $ref: '#/components/schemas/RoleInstance'
          type: array
      type: object
    ServicePlan:
      example:
        name: name
        description: description
      properties:
        name:
          type: string
        description:
          type: string
      type: object
    Router:
      example:
        address: address
        opts:
          key: opts
        status-detail: status-detail
        name: name
        type: type
        status: status
      properties:
        name:
          type: string
        opts:
          additionalProperties:
            type: string
          type: object
        address:
          type: string
        type:
          type: string
        status:
          type: string
        status-detail:
          type: string
      type: object
    VolumePlansListResponse:
      additionalProperties:
        $ref: '#/components/schemas/VolumePlan'
      description: Response returned by Volume Plans list.
      type: object
    AppLock:
      description: Stores information about a lock hold on the app
      example:
        owner: owner
        reason: reason
        acquireDate: 2000-01-23T04:56:07.000+00:00
        locked: true
      properties:
        locked:
          type: boolean
        reason:
          type: string
        owner:
          type: string
        acquireDate:
          format: date-time
          type: string
      type: object
    RecommendedResources:
      example:
        process: process
        recommendations:
        - memory: memory
          cpu: cpu
          type: type
        - memory: memory
          cpu: cpu
          type: type
      properties:
        process:
          type: string
        recommendations:
          items:
            $ref: '#/components/schemas/RecommendedResources_recommendations'
          type: array
      type: object
    Cluster_kubeConfig_user_exec_env:
      example:
        name: name
        value: value
      properties:
        name:
          type: string
        value:
          type: string
    JobServiceInstanceBind:
      example:
        parameters:
          key: parameters
      properties:
        parameters:
          additionalProperties:
            type: string
          type: object
      type: object
    RoleDefaultData:
      description: Default a role
      example:
        rolesmap:
          key:
          - rolesmap
          - rolesmap
      properties:
        rolesmap:
          additionalProperties:
            items:
              type: string
            type: array
          type: object
      type: object
    Volume:
      description: Volume
      example:
        teamOwner: teamOwner
        binds:
        - readonly: true
          id:
            app: app
            volume: volume
            mountpoint: mountpoint
        - readonly: true
          id:
            app: app
            volume: volume
            mountpoint: mountpoint
        opts:
          key: opts
        name: name
        pool: pool
        plan:
          opts:
            key: opts
          name: name
        status: status
      properties:
        name:
          description: Volume name.
          type: string
        pool:
          description: Volume pool.
          type: string
        teamOwner:
          description: Team that owns the volume.
          type: string
        status:
          description: Volume status.
          type: string
        plan:
          $ref: '#/components/schemas/VolumePlan'
        binds:
          description: Volume binds.
          items:
            $ref: '#/components/schemas/VolumeBind'
          type: array
        opts:
          additionalProperties:
            type: string
          description: Custom volume options.
          type: object
      type: object
    AutoScaleSpec_behavior_scaleDown:
      example:
        stabilizationWindow: 4
        unitsPolicyValue: 7
        percentagePolicyValue: 1
      properties:
        stabilizationWindow:
          description: Time in seconds for stabilization before scaling down
          type: integer
          x-go-custom-type: '*int32'
        unitsPolicyValue:
          description: Minimum number of units to scale down
          type: integer
          x-go-custom-type: '*int32'
        percentagePolicyValue:
          description: Percentage threshold for scaling down
          type: integer
          x-go-custom-type: '*int32'
    AppCertificates:
      example:
        routers:
          key:
            cnames:
              key:
                certificate: certificate
                issuer: issuer
      properties:
        routers:
          additionalProperties:
            $ref: '#/components/schemas/AppCertificates_routers'
          type: object
      required:
      - routers
      type: object
    CertIssuerSetData:
      example:
        cname: cname
        issuer: issuer
      properties:
        cname:
          type: string
        issuer:
          type: string
      type: object
    UpdateApp:
      example:
        teamOwner: teamOwner
        metadata:
          annotations:
          - name: name
            value: value
            delete: true
          - name: name
            value: value
            delete: true
          labels:
          - name: name
            value: value
            delete: true
          - name: name
            value: value
            delete: true
        processes:
        - metadata:
            annotations:
            - name: name
              value: value
              delete: true
            - name: name
              value: value
              delete: true
            labels:
            - name: name
              value: value
              delete: true
            - name: name
              value: value
              delete: true
          name: name
          plan: plan
        - metadata:
            annotations:
            - name: name
              value: value
              delete: true
            - name: name
              value: value
              delete: true
            labels:
            - name: name
              value: value
              delete: true
            - name: name
              value: value
              delete: true
          name: name
          plan: plan
        planoverride:
          memory: 5
          cpumilli: 2
          cpuBurst: 7.061401241503109105224211816675961017608642578125
        noRestart: true
        imageReset: true
        pool: pool
        description: description
        plan: plan
        platform: platform
        tags:
        - tags
        - tags
      properties:
        tags:
          description: App tags.
          items:
            type: string
          type: array
        plan:
          description: App plan name.
          type: string
        planoverride:
          $ref: '#/components/schemas/PlanOverride'
        pool:
          description: App pool name.
          type: string
        platform:
          description: App platform.
          type: string
        description:
          description: App description.
          type: string
        teamOwner:
          description: Team that owns the app.
          type: string
        noRestart:
          description: Prevent app restart.
          type: boolean
        imageReset:
          description: Reset app image to platform base image.
          type: boolean
        metadata:
          $ref: '#/components/schemas/Metadata'
        processes:
          items:
            $ref: '#/components/schemas/AppProcess'
          type: array
      type: object
    SetRoutableArgs:
      example:
        isRoutable: true
        version: version
      properties:
        version:
          type: string
        isRoutable:
          type: boolean
      type: object
    Plan_cpuBurst:
      example:
        default: 1.46581298050294517310021547018550336360931396484375
        maxAllowed: 5.962133916683182377482808078639209270477294921875
      properties:
        default:
          type: number
          x-go-custom-type: float64
        maxAllowed:
          type: number
          x-go-custom-type: float64
    ServiceBroker_Config_AuthConfig:
      example:
        BearerConfig:
          token: token
        BasicAuthConfig:
          password: password
          username: username
      properties:
        BearerConfig:
          $ref: '#/components/schemas/ServiceBroker_Config_AuthConfig_BearerConfig'
        BasicAuthConfig:
          $ref: '#/components/schemas/ServiceBroker_Config_AuthConfig_BasicAuthConfig'
    App_routers:
      example:
        addresses:
        - addresses
        - addresses
        opts: '{}'
        name: name
      properties:
        addresses:
          items:
            type: string
          type: array
        opts:
          properties: {}
          type: object
        name:
          type: string
    Metadata:
      description: App metadata such as custom labels and annotations.
      example:
        annotations:
        - name: name
          value: value
          delete: true
        - name: name
          value: value
          delete: true
        labels:
        - name: name
          value: value
          delete: true
        - name: name
          value: value
          delete: true
      properties:
        annotations:
          items:
            $ref: '#/components/schemas/MetadataItem'
          type: array
        labels:
          items:
            $ref: '#/components/schemas/MetadataItem'
          type: array
      type: object
    ServiceInstance:
      example:
        team_owner: team_owner
        teams:
        - teams
        - teams
        service_name: service_name
        jobs:
        - jobs
        - jobs
        pool: pool
        description: description
        plan_name: plan_name
        tags:
        - tags
        - tags
        bound_units:
        - app_name: app_name
          ip: ip
          id: id
        - app_name: app_name
          ip: ip
          id: id
        name: name
        id: 0
        parameters:
          key: parameters
        apps:
        - apps
        - apps
      properties:
        name:
          type: string
        tags:
          items:
            type: string
          type: array
        id:
          type: integer
        service_name:
          type: string
        plan_name:
          type: string
        apps:
          items:
            type: string
          type: array
        jobs:
          items:
            type: string
          type: array
        bound_units:
          items:
            $ref: '#/components/schemas/ServiceInstanceBoundUnit'
          type: array
        teams:
          items:
            type: string
          type: array
        team_owner:
          type: string
        description:
          type: string
        parameters:
          additionalProperties:
            type: string
          type: object
        pool:
          type: string
      type: object
    ServiceInstanceBind:
      example:
        noRestart: true
        parameters:
          key: parameters
      properties:
        noRestart:
          type: boolean
        parameters:
          additionalProperties:
            type: string
          type: object
      type: object
    URL:
      example:
        scheme: scheme
        host: host
      properties:
        scheme:
          type: string
        host:
          type: string
      type: object
    App_ID:
      example:
        App: App
        MountPoint: MountPoint
        Volume: Volume
      properties:
        App:
          type: string
        MountPoint:
          type: string
        Volume:
          type: string
    AppStartStop:
      example:
        process: process
        version: version
      properties:
        process:
          type: string
        version:
          type: string
      type: object
    AppCreateResponse:
      description: Newly created app information.
      example:
        ip: ip
        repository_url: repository_url
        status: status
      properties:
        status:
          type: string
        repository_url:
          type: string
        ip:
          type: string
      type: object
    AppCertificates_routers:
      example:
        cnames:
          key:
            certificate: certificate
            issuer: issuer
      properties:
        cnames:
          additionalProperties:
            $ref: '#/components/schemas/AppCertificates_cnames'
          type: object
      required:
      - cnames
    AppRouterList:
      description: Application Router
      items:
        $ref: '#/components/schemas/AppRouter'
      type: array
    Cluster_kubeConfig_user_exec:
      example:
        args:
        - args
        - args
        apiVersion: apiVersion
        interactiveMode: interactiveMode
        env:
        - name: name
          value: value
        - name: name
          value: value
        command: command
      properties:
        args:
          items:
            type: string
          type: array
        apiVersion:
          type: string
        interactiveMode:
          type: string
        env:
          items:
            $ref: '#/components/schemas/Cluster_kubeConfig_user_exec_env'
          type: array
        command:
          type: string
    Team:
      example:
        permissions:
        - permissions
        - permissions
        name: name
        tags:
        - tags
        - tags
      properties:
        name:
          type: string
        tags:
          items:
            type: string
          type: array
        permissions:
          items:
            type: string
          type: array
      type: object
    JobList:
      items:
        $ref: '#/components/schemas/Job'
      type: array
    InputJob:
      example:
        teamOwner: teamOwner
        container:
          image: image
          envs:
          - public: true
            managedBy: managedBy
            name: name
            alias: alias
            value: value
          - public: true
            managedBy: managedBy
            name: name
            alias: alias
            value: value
          command:
          - command
          - command
        schedule: schedule
        metadata:
          annotations:
          - name: name
            value: value
            delete: true
          - name: name
            value: value
            delete: true
          labels:
          - name: name
            value: value
            delete: true
          - name: name
            value: value
            delete: true
        name: name
        pool: pool
        description: description
        concurrencyPolicy: concurrencyPolicy
        manual: true
        plan: plan
        activeDeadlineSeconds: 0
        tags:
        - tags
        - tags
      properties:
        name:
          description: Job name.
          type: string
        tags:
          description: Job tags.
          items:
            type: string
          type: array
        schedule:
          description: how often this job will run.
          type: string
        plan:
          description: job plan name.
          type: string
        pool:
          description: job pool name.
          type: string
        description:
          description: job description.
          type: string
        teamOwner:
          description: Team that owns the job.
          type: string
        metadata:
          $ref: '#/components/schemas/Metadata'
        manual:
          description: create a manual job.
          type: boolean
        activeDeadlineSeconds:
          description: job active deadline seconds.
          format: int64
          type: integer
          x-go-custom-type: '*int64'
        concurrencyPolicy:
          description: concurrency policy.
          type: string
          x-go-custom-type: '*string'
        container:
          $ref: '#/components/schemas/InputJob_container'
      required:
      - name
      type: object
    AssignTokenArgs:
      description: Assign role to token arguments.
      example:
        token_id: token_id
        context: context
      properties:
        token_id:
          type: string
        context:
          type: string
      type: object
    App_serviceInstanceBinds:
      description: Service instance bind
      example:
        instance: instance
        service: service
        plan: plan
      properties:
        instance:
          type: string
        service:
          type: string
        plan:
          type: string
    ServiceDoc:
      properties:
        doc:
          type: string
      type: object
    ClusterHelp:
      example:
        custom_data_help:
          key: custom_data_help
        create_data_help:
          key: create_data_help
        provisioner_help: provisioner_help
      properties:
        provisioner_help:
          type: string
        custom_data_help:
          additionalProperties:
            type: string
          type: object
        create_data_help:
          additionalProperties:
            type: string
          type: object
      type: object
    RoleUpdateData:
      description: Role of an user.
      example:
        newName: newName
        contextType: contextType
        name: name
        description: description
      properties:
        name:
          type: string
        contextType:
          type: string
        newName:
          type: string
        description:
          type: string
      type: object
    AutoScaleSpec:
      description: Units Auto Scale spec
      example:
        process: process
        averageCPU: averageCPU
        schedules:
        - minReplicas: 7
          timezone: timezone
          name: name
          start: start
          end: end
        - minReplicas: 7
          timezone: timezone
          name: name
          start: start
          end: end
        maxUnits: 2
        minUnits: 5
        prometheus:
        - prometheusAddress: prometheusAddress
          query: query
          name: name
          threshold: 9.301444243932575517419536481611430644989013671875
          activationThreshold: 3.61607674925191080461672754609026014804840087890625
        - prometheusAddress: prometheusAddress
          query: query
          name: name
          threshold: 9.301444243932575517419536481611430644989013671875
          activationThreshold: 3.61607674925191080461672754609026014804840087890625
        behavior:
          scaleDown:
            stabilizationWindow: 4
            unitsPolicyValue: 7
            percentagePolicyValue: 1
        version: 2
      properties:
        process:
          type: string
        minUnits:
          type: integer
        maxUnits:
          type: integer
        averageCPU:
          type: string
        schedules:
          items:
            $ref: '#/components/schemas/AutoScaleSchedule'
          type: array
        prometheus:
          items:
            $ref: '#/components/schemas/AutoScalePrometheus'
          type: array
        version:
          type: integer
        behavior:
          $ref: '#/components/schemas/AutoScaleSpec_behavior'
      type: object
    Provisioner:
      example:
        name: name
        cluster_help:
          custom_data_help:
            key: custom_data_help
          create_data_help:
            key: create_data_help
          provisioner_help: provisioner_help
      properties:
        name:
          type: string
        cluster_help:
          $ref: '#/components/schemas/ClusterHelp'
      type: object
    Plan:
      description: App plan.
      example:
        default: true
        memory: 0
        cpumilli: 0
        cpuBurst:
          default: 1.46581298050294517310021547018550336360931396484375
          maxAllowed: 5.962133916683182377482808078639209270477294921875
        name: name
        override:
          memory: 5
          cpumilli: 2
          cpuBurst: 7.061401241503109105224211816675961017608642578125
      properties:
        name:
          type: string
        memory:
          format: int64
          minimum: 0
          type: integer
        cpumilli:
          minimum: 0
          type: integer
        cpuBurst:
          $ref: '#/components/schemas/Plan_cpuBurst'
        default:
          type: boolean
        override:
          $ref: '#/components/schemas/PlanOverride'
      type: object
    Lock:
      example:
        owner: owner
        reason: reason
        acquireDate: acquireDate
        locked: true
      properties:
        locked:
          type: boolean
        reason:
          type: string
        owner:
          type: string
        acquireDate:
          type: string
      type: object
    AppRouter:
      description: Application Router
      example:
        addresses:
        - addresses
        - addresses
        address: address
        opts: '{}'
        status-detail: status-detail
        name: name
        type: type
        status: status
      properties:
        name:
          type: string
        opts:
          properties: {}
          type: object
        address:
          type: string
        addresses:
          items:
            type: string
          type: array
        type:
          type: string
        status:
          type: string
        status-detail:
          type: string
      type: object
    RoleUser:
      description: Role of an user.
      example:
        contexttype: contexttype
        name: name
        contextvalue: contextvalue
        group: group
      properties:
        name:
          type: string
        contexttype:
          type: string
        contextvalue:
          type: string
        group:
          type: string
      type: object
    VolumeUpdateData:
      description: Volume
      example:
        teamOwner: teamOwner
        opts:
          key: opts
        name: name
        pool: pool
        plan:
          opts:
            key: opts
          name: name
        status: status
      properties:
        name:
          description: Volume name.
          type: string
        pool:
          description: Volume pool.
          type: string
        teamOwner:
          description: Team that owns the volume.
          type: string
        status:
          description: Volume status.
          type: string
        plan:
          $ref: '#/components/schemas/VolumePlan'
        opts:
          additionalProperties:
            type: string
          description: Custom volume options.
          type: object
      type: object
    Event:
      description: Tsuru event
      example:
        UniqueID: UniqueID
        Target:
          Type: Type
          Value: Value
        EndTime: 2000-01-23T04:56:07.000+00:00
        StartCustomData:
          Kind: 0.80082819046101150206595775671303272247314453125
          Data: Data
        Log: Log
        StartTime: 2000-01-23T04:56:07.000+00:00
        Running: true
        EndCustomData:
          Kind: 0.80082819046101150206595775671303272247314453125
          Data: Data
        Error: Error
        OtherCustomData:
          Kind: 0.80082819046101150206595775671303272247314453125
          Data: Data
      properties:
        UniqueID:
          type: string
        StartTime:
          format: date-time
          type: string
        EndTime:
          format: date-time
          type: string
        Target:
          $ref: '#/components/schemas/Event_Target'
        StartCustomData:
          $ref: '#/components/schemas/Event_StartCustomData'
        EndCustomData:
          $ref: '#/components/schemas/Event_StartCustomData'
        OtherCustomData:
          $ref: '#/components/schemas/Event_StartCustomData'
        Error:
          type: string
        Log:
          type: string
        Running:
          type: boolean
      type: object
    ServiceBroker_Config_AuthConfig_BasicAuthConfig:
      example:
        password: password
        username: username
      properties:
        password:
          type: string
        username:
          type: string
    Webhook:
      example:
        team_owner: team_owner
        headers:
          key:
          - headers
          - headers
        method: method
        name: name
        insecure: true
        description: description
        proxy_url: proxy_url
        body: body
        event_filter:
          target_values:
          - target_values
          - target_values
          kind_names:
          - kind_names
          - kind_names
          kind_types:
          - kind_types
          - kind_types
          error_only: true
          success_only: true
          target_types:
          - target_types
          - target_types
        url: url
      properties:
        name:
          type: string
        description:
          type: string
        team_owner:
          type: string
        event_filter:
          $ref: '#/components/schemas/WebhookEventFilter'
        url:
          type: string
        proxy_url:
          type: string
        headers:
          additionalProperties:
            items:
              type: string
            type: array
          type: object
        method:
          type: string
        body:
          type: string
        insecure:
          type: boolean
      type: object
    ErrorMessage:
      description: Error message.
      type: string
    ServiceInstanceUpdateData:
      example:
        description: description
        plan: plan
        parameters:
          key: parameters
        teamowner: teamowner
        tags:
        - tags
        - tags
      properties:
        description:
          type: string
        teamowner:
          type: string
        plan:
          type: string
        tags:
          items:
            type: string
          type: array
        parameters:
          additionalProperties:
            type: string
          type: object
      type: object
    MetadataItem:
      description: Metadata items
      example:
        name: name
        value: value
        delete: true
      properties:
        name:
          type: string
        value:
          type: string
        delete:
          type: boolean
      type: object
    MiniApp:
      description: List containing minimal information about apps.
      example:
        teamOwner: teamOwner
        ip: ip
        name: name
        pool: pool
        cname:
        - cname
        - cname
        lock:
          owner: owner
          reason: reason
          acquireDate: acquireDate
          locked: true
        units:
        - address:
            scheme: scheme
            host: host
          routable: true
          processname: processname
          ip: ip
          type: type
          version: 0
          restarts: 6
          createdAt: createdAt
          appname: appname
          ready: true
          name: name
          id: id
          status: status
        - address:
            scheme: scheme
            host: host
          routable: true
          processname: processname
          ip: ip
          type: type
          version: 0
          restarts: 6
          createdAt: createdAt
          appname: appname
          ready: true
          name: name
          id: id
          status: status
        error: error
        plan:
          default: true
          memory: 0
          cpumilli: 0
          cpuBurst:
            default: 1.46581298050294517310021547018550336360931396484375
            maxAllowed: 5.962133916683182377482808078639209270477294921875
          name: name
          override:
            memory: 5
            cpumilli: 2
            cpuBurst: 7.061401241503109105224211816675961017608642578125
        routers:
        - address: address
          opts:
            key: opts
          status-detail: status-detail
          name: name
          type: type
          status: status
        - address: address
          opts:
            key: opts
          status-detail: status-detail
          name: name
          type: type
          status: status
        tags:
        - tags
        - tags
      properties:
        name:
          type: string
        pool:
          type: string
        teamOwner:
          type: string
        plan:
          $ref: '#/components/schemas/Plan'
        units:
          items:
            $ref: '#/components/schemas/Unit'
          type: array
        cname:
          items:
            type: string
          type: array
        ip:
          type: string
        routers:
          items:
            $ref: '#/components/schemas/Router'
          type: array
        lock:
          $ref: '#/components/schemas/Lock'
        tags:
          items:
            type: string
          type: array
        error:
          type: string
      type: object
    Cluster_kubeConfig_user_authprovider:
      example:
        name: name
        config:
          key: config
      properties:
        name:
          type: string
        config:
          additionalProperties:
            type: string
          type: object
    Event_StartCustomData:
      example:
        Kind: 0.80082819046101150206595775671303272247314453125
        Data: Data
      properties:
        Kind:
          type: number
        Data:
          type: string
    Cluster_kubeConfig_user:
      example:
        password: password
        client-certificate-data: client-certificate-data
        client-key-data: client-key-data
        auth-provider:
          name: name
          config:
            key: config
        exec:
          args:
          - args
          - args
          apiVersion: apiVersion
          interactiveMode: interactiveMode
          env:
          - name: name
            value: value
          - name: name
            value: value
          command: command
        token: token
        username: username
      properties:
        password:
          type: string
        client-certificate-data:
          type: string
        client-key-data:
          type: string
        auth-provider:
          $ref: '#/components/schemas/Cluster_kubeConfig_user_authprovider'
        exec:
          $ref: '#/components/schemas/Cluster_kubeConfig_user_exec'
        token:
          type: string
        username:
          type: string
    CertificateSetData:
      example:
        cname: cname
        certificate: certificate
        key: key
      properties:
        cname:
          type: string
        certificate:
          format: byte
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
          x-go-custom-type: '[]byte'
        key:
          format: byte
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
          x-go-custom-type: '[]byte'
      type: object
    ServiceBroker_Config_AuthConfig_BearerConfig:
      example:
        token: token
      properties:
        token:
          type: string
    Job_spec:
      example:
        container:
          image: image
          envs:
          - public: true
            managedBy: managedBy
            name: name
            alias: alias
            value: value
          - public: true
            managedBy: managedBy
            name: name
            alias: alias
            value: value
          command:
          - command
          - command
        schedule: schedule
        concurrencyPolicy: concurrencyPolicy
        manual: true
        activeDeadlineSeconds: 0
      properties:
        container:
          $ref: '#/components/schemas/InputJob_container'
        schedule:
          type: string
        concurrencyPolicy:
          description: concurrency policy.
          type: string
          x-go-custom-type: '*string'
        manual:
          type: boolean
        activeDeadlineSeconds:
          description: job active deadline seconds.
          format: int64
          type: integer
          x-go-custom-type: '*int64'
    Unit:
      example:
        address:
          scheme: scheme
          host: host
        routable: true
        processname: processname
        ip: ip
        type: type
        version: 0
        restarts: 6
        createdAt: createdAt
        appname: appname
        ready: true
        name: name
        id: id
        status: status
      properties:
        id:
          type: string
        name:
          type: string
        appname:
          type: string
        processname:
          type: string
        type:
          type: string
        ip:
          type: string
        status:
          type: string
        version:
          type: integer
        routable:
          type: boolean
          x-go-custom-type: '*bool'
        ready:
          type: boolean
          x-go-custom-type: '*bool'
        restarts:
          type: integer
          x-go-custom-type: '*int'
        createdAt:
          type: string
        address:
          $ref: '#/components/schemas/URL'
      type: object
    TeamUser:
      example:
        roles:
        - roles
        - roles
        email: email
      properties:
        email:
          type: string
        roles:
          items:
            type: string
          type: array
      type: object
    ServiceInfo:
      example:
        teams:
        - teams
        - teams
        jobs:
        - jobs
        - jobs
        name: name
        pool: pool
        planname: planname
        servicename: servicename
        id: id
        apps:
        - apps
        - apps
        info: '{}'
        teamowner: teamowner
      properties:
        id:
          type: string
        name:
          type: string
        pool:
          type: string
        teams:
          items:
            type: string
          type: array
        planname:
          type: string
        apps:
          items:
            type: string
          type: array
        jobs:
          items:
            type: string
          type: array
        servicename:
          type: string
        info:
          properties: {}
          type: object
        teamowner:
          type: string
      type: object
    InputJob_container:
      example:
        image: image
        envs:
        - public: true
          managedBy: managedBy
          name: name
          alias: alias
          value: value
        - public: true
          managedBy: managedBy
          name: name
          alias: alias
          value: value
        command:
        - command
        - command
      properties:
        image:
          type: string
        envs:
          items:
            $ref: '#/components/schemas/EnvVar'
          type: array
        command:
          items:
            type: string
          type: array
    JobInfo:
      example:
        cluster: cluster
        dashboardURL: dashboardURL
        serviceInstanceBinds:
        - instance: instance
          service: service
          plan: plan
        - instance: instance
          service: service
          plan: plan
        units:
        - address:
            scheme: scheme
            host: host
          routable: true
          processname: processname
          ip: ip
          type: type
          version: 0
          restarts: 6
          createdAt: createdAt
          appname: appname
          ready: true
          name: name
          id: id
          status: status
        - address:
            scheme: scheme
            host: host
          routable: true
          processname: processname
          ip: ip
          type: type
          version: 0
          restarts: 6
          createdAt: createdAt
          appname: appname
          ready: true
          name: name
          id: id
          status: status
        job:
          owner: owner
          teamOwner: teamOwner
          metadata:
            annotations:
            - name: name
              value: value
              delete: true
            - name: name
              value: value
              delete: true
            labels:
            - name: name
              value: value
              delete: true
            - name: name
              value: value
              delete: true
          teams:
          - teams
          - teams
          name: name
          pool: pool
          description: description
          plan:
            default: true
            memory: 0
            cpumilli: 0
            cpuBurst:
              default: 1.46581298050294517310021547018550336360931396484375
              maxAllowed: 5.962133916683182377482808078639209270477294921875
            name: name
            override:
              memory: 5
              cpumilli: 2
              cpuBurst: 7.061401241503109105224211816675961017608642578125
          spec:
            container:
              image: image
              envs:
              - public: true
                managedBy: managedBy
                name: name
                alias: alias
                value: value
              - public: true
                managedBy: managedBy
                name: name
                alias: alias
                value: value
              command:
              - command
              - command
            schedule: schedule
            concurrencyPolicy: concurrencyPolicy
            manual: true
            activeDeadlineSeconds: 0
      properties:
        cluster:
          type: string
        job:
          $ref: '#/components/schemas/Job'
        units:
          items:
            $ref: '#/components/schemas/Unit'
          type: array
        dashboardURL:
          type: string
        serviceInstanceBinds:
          description: Service instance binds on the job
          items:
            $ref: '#/components/schemas/App_serviceInstanceBinds'
          type: array
      type: object
    ServiceBroker:
      example:
        Config:
          Context:
            key: Context
          Insecure: true
          CacheExpirationSeconds: 0
          AuthConfig:
            BearerConfig:
              token: token
            BasicAuthConfig:
              password: password
              username: username
        URL: URL
        Name: Name
      properties:
        Name:
          type: string
        URL:
          type: string
        Config:
          $ref: '#/components/schemas/ServiceBroker_Config'
      type: object
    PlanOverride:
      description: App plan override.
      example:
        memory: 5
        cpumilli: 2
        cpuBurst: 7.061401241503109105224211816675961017608642578125
      properties:
        memory:
          format: int64
          type: integer
          x-go-custom-type: '*int64'
        cpumilli:
          type: integer
          x-go-custom-type: '*int'
        cpuBurst:
          type: number
          x-go-custom-type: '*float64'
      type: object
    VolumeBindID:
      example:
        app: app
        volume: volume
        mountpoint: mountpoint
      properties:
        app:
          description: App the volume is bound to.
          type: string
        mountpoint:
          description: Volume mountpoint.
          type: string
        volume:
          description: Volume name.
          type: string
      type: object
    Job:
      example:
        owner: owner
        teamOwner: teamOwner
        metadata:
          annotations:
          - name: name
            value: value
            delete: true
          - name: name
            value: value
            delete: true
          labels:
          - name: name
            value: value
            delete: true
          - name: name
            value: value
            delete: true
        teams:
        - teams
        - teams
        name: name
        pool: pool
        description: description
        plan:
          default: true
          memory: 0
          cpumilli: 0
          cpuBurst:
            default: 1.46581298050294517310021547018550336360931396484375
            maxAllowed: 5.962133916683182377482808078639209270477294921875
          name: name
          override:
            memory: 5
            cpumilli: 2
            cpuBurst: 7.061401241503109105224211816675961017608642578125
        spec:
          container:
            image: image
            envs:
            - public: true
              managedBy: managedBy
              name: name
              alias: alias
              value: value
            - public: true
              managedBy: managedBy
              name: name
              alias: alias
              value: value
            command:
            - command
            - command
          schedule: schedule
          concurrencyPolicy: concurrencyPolicy
          manual: true
          activeDeadlineSeconds: 0
      properties:
        name:
          description: Job name.
          type: string
        pool:
          description: job pool name.
          type: string
        description:
          description: job description.
          type: string
        owner:
          description: who created this job.
          type: string
        teamOwner:
          description: Team that owns the job.
          type: string
        teams:
          description: Teams that have access to this job
          items:
            type: string
          type: array
        plan:
          $ref: '#/components/schemas/Plan'
        metadata:
          $ref: '#/components/schemas/Metadata'
        spec:
          $ref: '#/components/schemas/Job_spec'
      type: object
    ServiceInstanceBoundUnit:
      example:
        app_name: app_name
        ip: ip
        id: id
      properties:
        app_name:
          type: string
        id:
          type: string
        ip:
          type: string
      type: object
    RoleAssignData:
      description: Assign a role
      example:
        roletarget: roletarget
        name: name
        sufix: sufix
        contextvalue: contextvalue
        version: version
      properties:
        name:
          type: string
        contextvalue:
          type: string
        roletarget:
          type: string
        sufix:
          type: string
        version:
          type: string
      type: object
    PlanRouter:
      description: Plan Router
      example:
        default: true
        readinessGates:
        - readinessGates
        - readinessGates
        name: name
        dynamic: true
        type: type
        config: '{}'
        info:
          key: info
      properties:
        name:
          type: string
        type:
          type: string
        config:
          properties: {}
          type: object
        info:
          additionalProperties:
            type: string
          type: object
        default:
          type: boolean
        dynamic:
          type: boolean
        readinessGates:
          items:
            type: string
          type: array
      type: object
    App_volumeBinds:
      example:
        ReadOnly: true
        ID:
          App: App
          MountPoint: MountPoint
          Volume: Volume
      properties:
        ReadOnly:
          type: boolean
        ID:
          $ref: '#/components/schemas/App_ID'
    ServiceList:
      example:
        instances:
        - instances
        - instances
        service: service
        plans:
        - plans
        - plans
        service_instances:
        - team_owner: team_owner
          teams:
          - teams
          - teams
          service_name: service_name
          jobs:
          - jobs
          - jobs
          pool: pool
          description: description
          plan_name: plan_name
          tags:
          - tags
          - tags
          bound_units:
          - app_name: app_name
            ip: ip
            id: id
          - app_name: app_name
            ip: ip
            id: id
          name: name
          id: 0
          parameters:
            key: parameters
          apps:
          - apps
          - apps
        - team_owner: team_owner
          teams:
          - teams
          - teams
          service_name: service_name
          jobs:
          - jobs
          - jobs
          pool: pool
          description: description
          plan_name: plan_name
          tags:
          - tags
          - tags
          bound_units:
          - app_name: app_name
            ip: ip
            id: id
          - app_name: app_name
            ip: ip
            id: id
          name: name
          id: 0
          parameters:
            key: parameters
          apps:
          - apps
          - apps
      properties:
        service:
          type: string
        instances:
          description: '[deprecated]'
          items:
            type: string
          type: array
        plans:
          items:
            type: string
          type: array
        service_instances:
          items:
            $ref: '#/components/schemas/ServiceInstance'
          type: array
      type: object
    TeamGroup:
      example:
        roles:
        - roles
        - roles
        group: group
      properties:
        group:
          type: string
        roles:
          items:
            type: string
          type: array
      type: object
    PoolUpdateData:
      example:
        default: true
        public: true
        force: true
        labels:
          key: labels
      properties:
        default:
          type: boolean
        public:
          type: boolean
        force:
          type: boolean
        labels:
          additionalProperties:
            type: string
          type: object
      type: object
    VolumeBind:
      example:
        readonly: true
        id:
          app: app
          volume: volume
          mountpoint: mountpoint
      properties:
        id:
          $ref: '#/components/schemas/VolumeBindID'
        readonly:
          description: Volume is read-only.
          type: boolean
      type: object
    TeamInfo:
      example:
        name: name
        pools:
        - default: true
          provisioner: provisioner
          public: true
          teams:
          - teams
          - teams
          allowed:
            key:
            - allowed
            - allowed
          name: name
          labels:
            key: labels
        - default: true
          provisioner: provisioner
          public: true
          teams:
          - teams
          - teams
          allowed:
            key:
            - allowed
            - allowed
          name: name
          labels:
            key: labels
        users:
        - permissions:
          - contexttype: contexttype
            name: name
            contextvalue: contextvalue
            group: group
          - contexttype: contexttype
            name: name
            contextvalue: contextvalue
            group: group
          roles:
          - contexttype: contexttype
            name: name
            contextvalue: contextvalue
            group: group
          - contexttype: contexttype
            name: name
            contextvalue: contextvalue
            group: group
          groups:
          - groups
          - groups
          email: email
        - permissions:
          - contexttype: contexttype
            name: name
            contextvalue: contextvalue
            group: group
          - contexttype: contexttype
            name: name
            contextvalue: contextvalue
            group: group
          roles:
          - contexttype: contexttype
            name: name
            contextvalue: contextvalue
            group: group
          - contexttype: contexttype
            name: name
            contextvalue: contextvalue
            group: group
          groups:
          - groups
          - groups
          email: email
        tags:
        - tags
        - tags
        apps:
        - cluster: cluster
          metadata:
            annotations:
            - name: name
              value: value
              delete: true
            - name: name
              value: value
              delete: true
            labels:
            - name: name
              value: value
              delete: true
            - name: name
              value: value
              delete: true
          cname:
          - cname
          - cname
          deploys: 0
          description: description
          units:
          - address:
              scheme: scheme
              host: host
            routable: true
            processname: processname
            ip: ip
            type: type
            version: 0
            restarts: 6
            createdAt: createdAt
            appname: appname
            ready: true
            name: name
            id: id
            status: status
          - address:
              scheme: scheme
              host: host
            routable: true
            processname: processname
            ip: ip
            type: type
            version: 0
            restarts: 6
            createdAt: createdAt
            appname: appname
            ready: true
            name: name
            id: id
            status: status
          error: error
          platform: platform
          internalAddresses:
          - Version: Version
            Port: 5
            Process: Process
            Domain: Domain
            Protocol: Protocol
          - Version: Version
            Port: 5
            Process: Process
            Domain: Domain
            Protocol: Protocol
          router: router
          autoscaleRecommendation:
          - process: process
            recommendations:
            - memory: memory
              cpu: cpu
              type: type
            - memory: memory
              cpu: cpu
              type: type
          - process: process
            recommendations:
            - memory: memory
              cpu: cpu
              type: type
            - memory: memory
              cpu: cpu
              type: type
          quota:
            limit: 1
            inuse: 6
          routeropts:
            key: routeropts
          lock:
            owner: owner
            reason: reason
            acquireDate: 2000-01-23T04:56:07.000+00:00
            locked: true
          routers:
          - addresses:
            - addresses
            - addresses
            opts: '{}'
            name: name
          - addresses:
            - addresses
            - addresses
            opts: '{}'
            name: name
          plan:
            default: true
            memory: 0
            cpumilli: 0
            cpuBurst:
              default: 1.46581298050294517310021547018550336360931396484375
              maxAllowed: 5.962133916683182377482808078639209270477294921875
            name: name
            override:
              memory: 5
              cpumilli: 2
              cpuBurst: 7.061401241503109105224211816675961017608642578125
          owner: owner
          volumeBinds:
          - ReadOnly: true
            ID:
              App: App
              MountPoint: MountPoint
              Volume: Volume
          - ReadOnly: true
            ID:
              App: App
              MountPoint: MountPoint
              Volume: Volume
          processes:
          - metadata:
              annotations:
              - name: name
                value: value
                delete: true
              - name: name
                value: value
                delete: true
              labels:
              - name: name
                value: value
                delete: true
              - name: name
                value: value
                delete: true
            name: name
            plan: plan
          - metadata:
              annotations:
              - name: name
                value: value
                delete: true
              - name: name
                value: value
                delete: true
              labels:
              - name: name
                value: value
                delete: true
              - name: name
                value: value
                delete: true
            name: name
            plan: plan
          provisioner: provisioner
          dashboardURL: dashboardURL
          teams:
          - teams
          - teams
          ip: ip
          pool: pool
          autoscale:
          - process: process
            averageCPU: averageCPU
            schedules:
            - minReplicas: 7
              timezone: timezone
              name: name
              start: start
              end: end
            - minReplicas: 7
              timezone: timezone
              name: name
              start: start
              end: end
            maxUnits: 2
            minUnits: 5
            prometheus:
            - prometheusAddress: prometheusAddress
              query: query
              name: name
              threshold: 9.301444243932575517419536481611430644989013671875
              activationThreshold: 3.61607674925191080461672754609026014804840087890625
            - prometheusAddress: prometheusAddress
              query: query
              name: name
              threshold: 9.301444243932575517419536481611430644989013671875
              activationThreshold: 3.61607674925191080461672754609026014804840087890625
            behavior:
              scaleDown:
                stabilizationWindow: 4
                unitsPolicyValue: 7
                percentagePolicyValue: 1
            version: 2
          - process: process
            averageCPU: averageCPU
            schedules:
            - minReplicas: 7
              timezone: timezone
              name: name
              start: start
              end: end
            - minReplicas: 7
              timezone: timezone
              name: name
              start: start
              end: end
            maxUnits: 2
            minUnits: 5
            prometheus:
            - prometheusAddress: prometheusAddress
              query: query
              name: name
              threshold: 9.301444243932575517419536481611430644989013671875
              activationThreshold: 3.61607674925191080461672754609026014804840087890625
            - prometheusAddress: prometheusAddress
              query: query
              name: name
              threshold: 9.301444243932575517419536481611430644989013671875
              activationThreshold: 3.61607674925191080461672754609026014804840087890625
            behavior:
              scaleDown:
                stabilizationWindow: 4
                unitsPolicyValue: 7
                percentagePolicyValue: 1
            version: 2
          tags:
          - tags
          - tags
          teamOwner: teamOwner
          serviceInstanceBinds:
          - instance: instance
            service: service
            plan: plan
          - instance: instance
            service: service
            plan: plan
          name: name
          unitsMetrics:
          - memory: memory
            cpu: cpu
            id: id
          - memory: memory
            cpu: cpu
            id: id
        - cluster: cluster
          metadata:
            annotations:
            - name: name
              value: value
              delete: true
            - name: name
              value: value
              delete: true
            labels:
            - name: name
              value: value
              delete: true
            - name: name
              value: value
              delete: true
          cname:
          - cname
          - cname
          deploys: 0
          description: description
          units:
          - address:
              scheme: scheme
              host: host
            routable: true
            processname: processname
            ip: ip
            type: type
            version: 0
            restarts: 6
            createdAt: createdAt
            appname: appname
            ready: true
            name: name
            id: id
            status: status
          - address:
              scheme: scheme
              host: host
            routable: true
            processname: processname
            ip: ip
            type: type
            version: 0
            restarts: 6
            createdAt: createdAt
            appname: appname
            ready: true
            name: name
            id: id
            status: status
          error: error
          platform: platform
          internalAddresses:
          - Version: Version
            Port: 5
            Process: Process
            Domain: Domain
            Protocol: Protocol
          - Version: Version
            Port: 5
            Process: Process
            Domain: Domain
            Protocol: Protocol
          router: router
          autoscaleRecommendation:
          - process: process
            recommendations:
            - memory: memory
              cpu: cpu
              type: type
            - memory: memory
              cpu: cpu
              type: type
          - process: process
            recommendations:
            - memory: memory
              cpu: cpu
              type: type
            - memory: memory
              cpu: cpu
              type: type
          quota:
            limit: 1
            inuse: 6
          routeropts:
            key: routeropts
          lock:
            owner: owner
            reason: reason
            acquireDate: 2000-01-23T04:56:07.000+00:00
            locked: true
          routers:
          - addresses:
            - addresses
            - addresses
            opts: '{}'
            name: name
          - addresses:
            - addresses
            - addresses
            opts: '{}'
            name: name
          plan:
            default: true
            memory: 0
            cpumilli: 0
            cpuBurst:
              default: 1.46581298050294517310021547018550336360931396484375
              maxAllowed: 5.962133916683182377482808078639209270477294921875
            name: name
            override:
              memory: 5
              cpumilli: 2
              cpuBurst: 7.061401241503109105224211816675961017608642578125
          owner: owner
          volumeBinds:
          - ReadOnly: true
            ID:
              App: App
              MountPoint: MountPoint
              Volume: Volume
          - ReadOnly: true
            ID:
              App: App
              MountPoint: MountPoint
              Volume: Volume
          processes:
          - metadata:
              annotations:
              - name: name
                value: value
                delete: true
              - name: name
                value: value
                delete: true
              labels:
              - name: name
                value: value
                delete: true
              - name: name
                value: value
                delete: true
            name: name
            plan: plan
          - metadata:
              annotations:
              - name: name
                value: value
                delete: true
              - name: name
                value: value
                delete: true
              labels:
              - name: name
                value: value
                delete: true
              - name: name
                value: value
                delete: true
            name: name
            plan: plan
          provisioner: provisioner
          dashboardURL: dashboardURL
          teams:
          - teams
          - teams
          ip: ip
          pool: pool
          autoscale:
          - process: process
            averageCPU: averageCPU
            schedules:
            - minReplicas: 7
              timezone: timezone
              name: name
              start: start
              end: end
            - minReplicas: 7
              timezone: timezone
              name: name
              start: start
              end: end
            maxUnits: 2
            minUnits: 5
            prometheus:
            - prometheusAddress: prometheusAddress
              query: query
              name: name
              threshold: 9.301444243932575517419536481611430644989013671875
              activationThreshold: 3.61607674925191080461672754609026014804840087890625
            - prometheusAddress: prometheusAddress
              query: query
              name: name
              threshold: 9.301444243932575517419536481611430644989013671875
              activationThreshold: 3.61607674925191080461672754609026014804840087890625
            behavior:
              scaleDown:
                stabilizationWindow: 4
                unitsPolicyValue: 7
                percentagePolicyValue: 1
            version: 2
          - process: process
            averageCPU: averageCPU
            schedules:
            - minReplicas: 7
              timezone: timezone
              name: name
              start: start
              end: end
            - minReplicas: 7
              timezone: timezone
              name: name
              start: start
              end: end
            maxUnits: 2
            minUnits: 5
            prometheus:
            - prometheusAddress: prometheusAddress
              query: query
              name: name
              threshold: 9.301444243932575517419536481611430644989013671875
              activationThreshold: 3.61607674925191080461672754609026014804840087890625
            - prometheusAddress: prometheusAddress
              query: query
              name: name
              threshold: 9.301444243932575517419536481611430644989013671875
              activationThreshold: 3.61607674925191080461672754609026014804840087890625
            behavior:
              scaleDown:
                stabilizationWindow: 4
                unitsPolicyValue: 7
                percentagePolicyValue: 1
            version: 2
          tags:
          - tags
          - tags
          teamOwner: teamOwner
          serviceInstanceBinds:
          - instance: instance
            service: service
            plan: plan
          - instance: instance
            service: service
            plan: plan
          name: name
          unitsMetrics:
          - memory: memory
            cpu: cpu
            id: id
          - memory: memory
            cpu: cpu
            id: id
      properties:
        name:
          type: string
        tags:
          items:
            type: string
          type: array
        users:
          items:
            $ref: '#/components/schemas/User'
          type: array
        pools:
          items:
            $ref: '#/components/schemas/Pool'
          type: array
        apps:
          items:
            $ref: '#/components/schemas/App'
          type: array
      type: object
    UnitMetrics:
      example:
        memory: memory
        cpu: cpu
        id: id
      properties:
        id:
          type: string
        cpu:
          type: string
        memory:
          type: string
      type: object
    RoleInstance:
      description: Association between a role and a context value.
      example:
        name: name
        contextvalue: contextvalue
      properties:
        name:
          type: string
        contextvalue:
          type: string
      type: object
    Cluster_kubeConfig:
      example:
        cluster:
          server: server
          certificate-authority-data: certificate-authority-data
          tls-server-name: tls-server-name
          insecure-skip-tls-verify: true
        user:
          password: password
          client-certificate-data: client-certificate-data
          client-key-data: client-key-data
          auth-provider:
            name: name
            config:
              key: config
          exec:
            args:
            - args
            - args
            apiVersion: apiVersion
            interactiveMode: interactiveMode
            env:
            - name: name
              value: value
            - name: name
              value: value
            command: command
          token: token
          username: username
      properties:
        cluster:
          $ref: '#/components/schemas/Cluster_kubeConfig_cluster'
        user:
          $ref: '#/components/schemas/Cluster_kubeConfig_user'
    AppRunOpts:
      description: App Run options
      example:
        once: true
        isolated: true
        command: command
      properties:
        once:
          type: boolean
        isolated:
          type: boolean
        command:
          type: string
      type: object
    PermissionData:
      description: Add a permission
      example:
        name: name
        permission:
        - permission
        - permission
      properties:
        name:
          type: string
        permission:
          items:
            type: string
          type: array
      type: object
    TeamTokenUpdateArgs:
      description: Arguments for updating an existing team token.
      example:
        regenerate: true
        description: description
        expires_in: 0
      properties:
        regenerate:
          type: boolean
        description:
          type: string
        expires_in:
          description: Expire time in seconds, using a negative value removes the expiration.
          format: int64
          type: integer
      type: object
    UserQuotaViewResponse:
      description: Response returned by User Quota View.
      example:
        limit: 6
        inuse: 0
      properties:
        inuse:
          type: integer
        limit:
          type: integer
      type: object
    User:
      description: User object.
      example:
        permissions:
        - contexttype: contexttype
          name: name
          contextvalue: contextvalue
          group: group
        - contexttype: contexttype
          name: name
          contextvalue: contextvalue
          group: group
        roles:
        - contexttype: contexttype
          name: name
          contextvalue: contextvalue
          group: group
        - contexttype: contexttype
          name: name
          contextvalue: contextvalue
          group: group
        groups:
        - groups
        - groups
        email: email
      properties:
        email:
          type: string
        roles:
          items:
            $ref: '#/components/schemas/RoleUser'
          type: array
        groups:
          items:
            type: string
          type: array
        permissions:
          items:
            $ref: '#/components/schemas/PermissionUser'
          type: array
      type: object
    UserData:
      example:
        password: password
        email: email
      properties:
        email:
          type: string
        password:
          type: string
      type: object
    VolumePlan:
      description: Volume plan.
      example:
        opts:
          key: opts
        name: name
      properties:
        name:
          description: Volume plan name.
          type: string
        opts:
          additionalProperties:
            type: string
          description: Volume plan opts.
          type: object
      type: object
    ServiceBrokerList:
      example:
        brokers:
        - Config:
            Context:
              key: Context
            Insecure: true
            CacheExpirationSeconds: 0
            AuthConfig:
              BearerConfig:
                token: token
              BasicAuthConfig:
                password: password
                username: username
          URL: URL
          Name: Name
        - Config:
            Context:
              key: Context
            Insecure: true
            CacheExpirationSeconds: 0
            AuthConfig:
              BearerConfig:
                token: token
              BasicAuthConfig:
                password: password
                username: username
          URL: URL
          Name: Name
      properties:
        brokers:
          items:
            $ref: '#/components/schemas/ServiceBroker'
          type: array
      type: object
    Env:
      description: Environment variable.
      example:
        private: true
        managedBy: managedBy
        name: name
        alias: alias
        value: value
      properties:
        name:
          type: string
        value:
          type: string
        alias:
          type: string
        private:
          type: boolean
        managedBy:
          type: string
      type: object
    ServiceBroker_Config:
      example:
        Context:
          key: Context
        Insecure: true
        CacheExpirationSeconds: 0
        AuthConfig:
          BearerConfig:
            token: token
          BasicAuthConfig:
            password: password
            username: username
      properties:
        Context:
          additionalProperties:
            type: string
          type: object
        Insecure:
          type: boolean
        CacheExpirationSeconds:
          type: integer
        AuthConfig:
          $ref: '#/components/schemas/ServiceBroker_Config_AuthConfig'
    PermissionUser:
      description: Permission of an user.
      example:
        contexttype: contexttype
        name: name
        contextvalue: contextvalue
        group: group
      properties:
        name:
          type: string
        contexttype:
          type: string
        contextvalue:
          type: string
        group:
          type: string
      type: object
    AppCName:
      description: Application CNames
      example:
        cname:
        - cname
        - cname
      properties:
        cname:
          items:
            type: string
          type: array
      type: object
    ServiceInstanceUnbind:
      example:
        noRestart: true
        force: true
      properties:
        noRestart:
          type: boolean
        force:
          type: boolean
      type: object
    TeamCreateArgs:
      example:
        name: name
        tags:
        - tags
        - tags
      properties:
        name:
          type: string
        tags:
          items:
            type: string
          type: array
      type: object
    App_internalAddresses:
      example:
        Version: Version
        Port: 5
        Process: Process
        Domain: Domain
        Protocol: Protocol
      properties:
        Version:
          type: string
        Port:
          format: int64
          type: integer
        Process:
          type: string
        Domain:
          type: string
        Protocol:
          type: string
    EnvSetData:
      description: Data sent to the environment set endpoint.
      example:
        pruneUnused: true
        private: true
        managedBy: managedBy
        envs:
        - private: true
          managedBy: managedBy
          name: name
          alias: alias
          value: value
        - private: true
          managedBy: managedBy
          name: name
          alias: alias
          value: value
        norestart: true
      properties:
        envs:
          items:
            $ref: '#/components/schemas/Env'
          minItems: 1
          type: array
        managedBy:
          type: string
        pruneUnused:
          type: boolean
        norestart:
          type: boolean
        private:
          type: boolean
      type: object
    AutoScalePrometheus:
      description: Auto Scale prometheus struct
      example:
        prometheusAddress: prometheusAddress
        query: query
        name: name
        threshold: 9.301444243932575517419536481611430644989013671875
        activationThreshold: 3.61607674925191080461672754609026014804840087890625
      properties:
        name:
          type: string
        query:
          type: string
        threshold:
          type: number
          x-go-custom-type: float64
        activationThreshold:
          type: number
          x-go-custom-type: float64
        prometheusAddress:
          type: string
      type: object
    ServiceInstanceInfo:
      example:
        teams:
        - teams
        - teams
        jobs:
        - jobs
        - jobs
        pool: pool
        planname: planname
        description: description
        plandescription: plandescription
        custominfo:
          key: custominfo
        parameters:
          key: parameters
        apps:
        - apps
        - apps
        teamowner: teamowner
        tags:
        - tags
        - tags
      properties:
        apps:
          items:
            type: string
          type: array
        jobs:
          items:
            type: string
          type: array
        teams:
          items:
            type: string
          type: array
        teamowner:
          type: string
        description:
          type: string
        pool:
          type: string
        planname:
          type: string
        plandescription:
          type: string
        tags:
          items:
            type: string
          type: array
        custominfo:
          additionalProperties:
            type: string
          type: object
        parameters:
          additionalProperties:
            type: string
          type: object
      type: object
    AppCertificates_cnames:
      example:
        certificate: certificate
        issuer: issuer
      properties:
        certificate:
          type: string
        issuer:
          type: string
      required:
      - certificate
      - issuer
    Service:
      properties:
        id:
          type: string
        username:
          type: string
        password:
          type: string
        endpoint:
          type: string
        multi-cluster:
          type: string
        team:
          type: string
      type: object
    Cluster:
      example:
        addresses:
        - addresses
        - addresses
        provisioner: provisioner
        default: true
        clientcert: clientcert
        httpProxy: httpProxy
        clientkey: clientkey
        cacert: cacert
        name: name
        pools:
        - pools
        - pools
        kubeConfig:
          cluster:
            server: server
            certificate-authority-data: certificate-authority-data
            tls-server-name: tls-server-name
            insecure-skip-tls-verify: true
          user:
            password: password
            client-certificate-data: client-certificate-data
            client-key-data: client-key-data
            auth-provider:
              name: name
              config:
                key: config
            exec:
              args:
              - args
              - args
              apiVersion: apiVersion
              interactiveMode: interactiveMode
              env:
              - name: name
                value: value
              - name: name
                value: value
              command: command
            token: token
            username: username
        custom_data:
          key: custom_data
        local: true
      properties:
        name:
          type: string
        addresses:
          items:
            type: string
          type: array
        provisioner:
          type: string
        cacert:
          format: byte
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
          x-go-custom-type: '[]byte'
        clientcert:
          format: byte
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
          x-go-custom-type: '[]byte'
        clientkey:
          format: byte
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
          x-go-custom-type: '[]byte'
        pools:
          items:
            type: string
          type: array
        default:
          type: boolean
        local:
          type: boolean
        custom_data:
          additionalProperties:
            type: string
          type: object
        httpProxy:
          type: string
        kubeConfig:
          $ref: '#/components/schemas/Cluster_kubeConfig'
      type: object
    DynamicRouter:
      description: Dynamic router
      example:
        readinessGates:
        - readinessGates
        - readinessGates
        name: name
        type: type
        config: '{}'
      properties:
        name:
          type: string
        type:
          type: string
        readinessGates:
          items:
            type: string
          type: array
        config:
          properties: {}
          type: object
      type: object
    PlatformInfo:
      example:
        images:
        - images
        - images
        platform:
          name: name
          disabled: true
      properties:
        platform:
          $ref: '#/components/schemas/Platform'
        images:
          items:
            type: string
          type: array
      type: object
    ChangePasswordData:
      example:
        confirm: confirm
        new: new
        old: old
      properties:
        confirm:
          type: string
        new:
          type: string
        old:
          type: string
      type: object
    TeamUpdateArgs:
      example:
        newname: newname
        tags:
        - tags
        - tags
      properties:
        newname:
          type: string
        tags:
          items:
            type: string
          type: array
      type: object
    EventCancelArgs:
      example:
        reason: reason
      properties:
        reason:
          type: string
      type: object
    AppProcess:
      example:
        metadata:
          annotations:
          - name: name
            value: value
            delete: true
          - name: name
            value: value
            delete: true
          labels:
          - name: name
            value: value
            delete: true
          - name: name
            value: value
            delete: true
        name: name
        plan: plan
      properties:
        name:
          type: string
        plan:
          type: string
        metadata:
          $ref: '#/components/schemas/Metadata'
      type: object
    Quota:
      example:
        limit: 1
        inuse: 6
      properties:
        inuse:
          format: int64
          type: integer
        limit:
          format: int64
          type: integer
      type: object
    AutoScaleSpec_behavior:
      description: Behavior settings for scaling actions
      example:
        scaleDown:
          stabilizationWindow: 4
          unitsPolicyValue: 7
          percentagePolicyValue: 1
      properties:
        scaleDown:
          $ref: '#/components/schemas/AutoScaleSpec_behavior_scaleDown'
    PoolConstraintSet:
      example:
        Field: Field
        Values:
        - Values
        - Values
        Blacklist: true
        append: true
        PoolExpr: PoolExpr
      properties:
        append:
          type: boolean
        PoolExpr:
          type: string
        Field:
          type: string
        Values:
          items:
            type: string
          type: array
        Blacklist:
          type: boolean
      type: object
    RoleAddData:
      description: Role of an user.
      example:
        contexttype: contexttype
        name: name
        description: description
      properties:
        name:
          type: string
        contexttype:
          type: string
        description:
          type: string
      type: object
    InputApp:
      example:
        teamOwner: teamOwner
        router: router
        metadata:
          annotations:
          - name: name
            value: value
            delete: true
          - name: name
            value: value
            delete: true
          labels:
          - name: name
            value: value
            delete: true
          - name: name
            value: value
            delete: true
        processes:
        - metadata:
            annotations:
            - name: name
              value: value
              delete: true
            - name: name
              value: value
              delete: true
            labels:
            - name: name
              value: value
              delete: true
            - name: name
              value: value
              delete: true
          name: name
          plan: plan
        - metadata:
            annotations:
            - name: name
              value: value
              delete: true
            - name: name
              value: value
              delete: true
            labels:
            - name: name
              value: value
              delete: true
            - name: name
              value: value
              delete: true
          name: name
          plan: plan
        name: name
        pool: pool
        routeropts:
          key: routeropts
        description: description
        plan: plan
        platform: platform
        tags:
        - tags
        - tags
      properties:
        name:
          description: App name.
          type: string
        tags:
          description: App tags.
          items:
            type: string
          type: array
        router:
          description: App router name.
          type: string
        routeropts:
          additionalProperties:
            type: string
          description: Custom router options.
          type: object
        plan:
          description: App plan name.
          type: string
        pool:
          description: App pool name.
          type: string
        platform:
          description: App platform.
          type: string
        description:
          description: App description.
          type: string
        teamOwner:
          description: Team that owns the app.
          type: string
        metadata:
          $ref: '#/components/schemas/Metadata'
        processes:
          items:
            $ref: '#/components/schemas/AppProcess'
          type: array
      required:
      - name
      type: object
  securitySchemes:
    Bearer:
      in: header
      name: Authorization
      type: apiKey
